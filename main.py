import os
import sqlite3
from datetime import datetime, timedelta, time
import logging
import pytz
from openai import OpenAI
import asyncio
import re
import asyncio
from telegram.error import TimedOut, NetworkError
import requests
import json
import Config
import uuid
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters, JobQueue
)

# ==================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====================
TELEGRAM_TOKEN = Config.TELEGRAM
OPENAI_API_KEY = Config.OPENAI_KEY
# –ÆKassa –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
YUKASSA_SHOP_ID = Config.YUKASSA_SHOP_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à shop_id –æ—Ç –ÆKassa
YUKASSA_SECRET_KEY = Config.YUKASSA_SECRET_KEY  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç –ÆKassa
YUKASSA_API_URL = "https://api.yookassa.ru/v3/payments"

ADMIN_ID = Config.ADMIN_ID

# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–µ—Ä–æ–≤ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫–∞–∑–∫–∏)
TESTER_IDS = [
    1968139479,
    5952409238
]

# –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
MSK_TZ = pytz.timezone('Europe/Moscow')

TARIFFS = {
    "week": {"price": 199, "stories": 10, "duration_days": 7},
    "month": {"price": 399, "stories": 40, "duration_days": 30},
    "year": {"price": 3990, "stories": 365, "duration_days": 365}
}
FREE_LIMIT = 1

MORALS = [
    "–î—Ä—É–∂–±–∞ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ",
    "–°–º–µ–ª–æ—Å—Ç—å –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Å—Ç—Ä–∞—Ö",
    "–í—Å–µ–≥–¥–∞ –≤–µ—Ä—å –≤ —Å–µ–±—è"
]

THEMES = [
    "ü™Ñ –ú–∞–≥–∏—è", "üöÄ –ö–æ—Å–º–æ—Å", "üëª –°—Ç—Ä–∞—Ö–∏", "üß∏ –ò–≥—Ä—É—à–∫–∏",
    "üç≠ –ï–¥–∞", "‚è≥ –°–Ω—ã –∏ –í—Ä–µ–º—è", "üèó –°—Ç—Ä–æ–π–∫–∏", "üå≥ –ü—Ä–∏—Ä–æ–¥–∞",
    "üß† –ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è", "‚úçÔ∏è –°–≤–æ—è"
]

# –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ ID –¥–ª—è —Ç–µ–º (–¥–ª—è callback_data)
THEME_IDS = {
    "ü™Ñ –ú–∞–≥–∏—è": "magic",
    "üöÄ –ö–æ—Å–º–æ—Å": "space", 
    "üëª –°—Ç—Ä–∞—Ö–∏": "fears",
    "üß∏ –ò–≥—Ä—É—à–∫–∏": "toys",
    "üç≠ –ï–¥–∞": "food",
    "‚è≥ –°–Ω—ã –∏ –í—Ä–µ–º—è": "dreams",
    "üèó –°—Ç—Ä–æ–π–∫–∏": "build",
    "üå≥ –ü—Ä–∏—Ä–æ–¥–∞": "nature",
    "üß† –ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è": "invent",
    "‚úçÔ∏è –°–≤–æ—è": "custom"
}

# –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º—ã –ø–æ ID
ID_TO_THEME = {v: k for k, v in THEME_IDS.items()}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å—é–∂–µ—Ç–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ ID
PLOT_TEMPLATES = {
    "magic": {
        "princess": "–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –∑–∞–±—ã–ª–∞ —Å–≤–æ—ë –∏–º—è –∏ —Ç–µ–ø–µ—Ä—å –¥—É–º–∞–µ—Ç, —á—Ç–æ –æ–Ω–∞ –∫–∞–ø—É—Å—Ç–∞. –¢–æ–ª—å–∫–æ —Å–º–µ–ª—ã–π –≥–µ—Ä–æ–π —Å–º–æ–∂–µ—Ç —Å–ø–∞—Å—Ç–∏ –µ—ë –∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –∫—Ç–æ –æ–Ω–∞ –µ—Å—Ç—å!",
        "dragon": "–≠—Ç–æ—Ç –¥—Ä–∞–∫–æ–Ω —á–∏—Ö–∞–µ—Ç –æ–≥–Ω—ë–º –∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Å–∂–∏–≥–∞–µ—Ç —Å–≤–æ–∏ –Ω–æ—Å–∫–∏! –ù—É–∂–Ω–æ –ø–æ–º–æ—á—å –µ–º—É –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–æ—Ä—Ç–∏—Ç—å —Å–≤–æ–π –≥–∞—Ä–¥–µ—Ä–æ–± ‚Äî –∏–ª–∏ –ø–æ–±–µ–¥–∏—Ç—å –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–±—É—à—É–µ—Ç—Å—è.",
        "tournament": "–í–µ–ª–∏–∫–∏–π —Ç—É—Ä–Ω–∏—Ä –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–≤, –≥–¥–µ –¥–∞–∂–µ –∂—é—Ä–∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–µ–ª—å–º–µ–Ω–µ–π! –ü—Ä–æ–π–¥—ë—à—å –ª–∏ —Ç—ã –≤—Å–µ –∑–∞–∫–æ–ª–¥–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è?",
        "spell": "–í —ç—Ç–æ–º –º–∏—Ä–µ –æ–¥–Ω–æ –≤–∞–∂–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å–ø—Ä—è—Ç–∞–ª–æ—Å—å –∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å. –ï–≥–æ –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –∏ —É–≥–æ–≤–æ—Ä–∏—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ª—à–µ–±–Ω–∏–∫–∞–º!",
        "school": "–®–∫–æ–ª—É –º–∞–≥–∏–∏ –∫—Ç–æ-—Ç–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª –≤ –æ–≥—Ä–æ–º–Ω—ã–π –±–ª–∏–Ω! –°–º–æ–∂–µ—à—å –ª–∏ —Ç—ã –≤–µ—Ä–Ω—É—Ç—å –µ—ë –æ–±—Ä–∞—Ç–Ω–æ?",
        "castle": "–ó–∞–º–æ–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ –≥–∏–≥–∞–Ω—Ç—Å–∫–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ –∏ –Ω–∞—á–∞–ª —Ç–∞—è—Ç—å. –ì–µ—Ä–æ—é –Ω—É–∂–Ω–æ —Å–ø–∞—Å—Ç–∏ –µ–≥–æ –ø—Ä–µ–∂–¥–µ, —á–µ–º –æ–Ω —Ä–∞—Å—Ç–∞–µ—Ç!",
        "teacher": "–£—á–∏—Ç–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Å—Ç–∞—Ä—ã–π —Ç–∞–ø–æ–∫. –ï–≥–æ –Ω–∞–¥–æ —Å—Ä–æ—á–Ω–æ –≤—ã—Ç–∞—â–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!",
        "witch": "–í–µ–¥—å–º–∞ –ø—Ä–∏–∫–∏–Ω—É–ª–∞—Å—å –∫–µ–∫—Å–æ–º –∏ –ø—Ä—è—á–µ—Ç—Å—è —Å—Ä–µ–¥–∏ –¥–µ—Å–µ—Ä—Ç–æ–≤. –°—É–º–µ–µ—à—å –µ—ë —Ä–∞–∑–æ–±–ª–∞—á–∏—Ç—å?"
    },
    "space": {
        "candy": "–î–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –¥–∞–ª—ë–∫–æ–π –ø–ª–∞–Ω–µ—Ç—ã, –≥–¥–µ –º–∞—Ä—à–º–µ–ª–ª–æ—É —É—Å—Ç—Ä–æ–∏–ª–∏ –±—É–Ω—Ç, –∏ –≤—Å—ë –≤–æ–∫—Ä—É–≥ –ø—Ä–∏–ª–∏–ø–∞–µ—Ç! –¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.",
        "race": "–û—Å–µ–¥–ª–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–π –∞—Å—Ç–µ—Ä–æ–∏–¥ –∏ —É—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –≥–æ–Ω–∫–∏ –≤–æ–∫—Ä—É–≥ —á—ë—Ä–Ω–æ–π –¥—ã—Ä—ã ‚Äî —Ä–∏—Å–∫–Ω—ë—à—å?",
        "robot": "–¢–≤–æ–π —Ä–æ–±–æ—Ç-–¥—Ä—É–≥ –ø—Ä–æ–ø–∞–ª –∏ —Ç–µ–ø–µ—Ä—å –∂–∏–≤—ë—Ç —Å –ø—ã–ª–µ—Å–æ—Å–∞–º–∏ –≤ –¥–∞–ª—ë–∫–æ–º –∫–æ—Å–º–æ—Å–µ. –ü—Ä–∏–¥—ë—Ç—Å—è –µ–≥–æ –≤—ã—Ä—É—á–∞—Ç—å!",
        "king": "–≠—Ç–æ—Ç –∫–æ—Ä–æ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –≤—Å–µ–º –ø—Ä—ã–≥–∞—Ç—å –Ω–∞ –ª—É–Ω–µ. –¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å –Ω–∏–º, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –≤–µ—Å–µ–ª—å–µ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞–º.",
        "rocket": "–°–æ–±–µ—Ä–∏ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–∫–µ—Ç—É –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –∫ –¥–∞–ª—ë–∫–æ–π –∑–≤–µ–∑–¥–µ!",
        "mars": "–ù–∞ –ú–∞—Ä—Å–µ –º–∞—Ä—Å–∏–∞–Ω–µ —Å–ª—É—á–∞–π–Ω–æ –∑–∞—Å—Ç—Ä—è–ª–∏ –≤ –±–∞–Ω–∫–µ —Å –≤–∞—Ä–µ–Ω—å–µ–º. –ö—Ç–æ, –µ—Å–ª–∏ –Ω–µ —Ç—ã, –ø–æ–º–æ–∂–µ—Ç –∏–º –≤—ã–±—Ä–∞—Ç—å—Å—è?",
        "planet": "–¢—ã –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ, –≥–¥–µ –≤—Å—ë –≤–≤–µ—Ä—Ö –Ω–æ–≥–∞–º–∏. –°–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –¥–æ—Ä–æ–≥—É –¥–æ–º–æ–π?",
        "donut": "–ò–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω—ã–π –ø–æ–Ω—á–∏–∫ –≤—Å–µ—Ö –ª–∏–ø–∫–æ –æ–±–Ω–∏–º–∞–µ—Ç –∏ –Ω–µ –æ—Ç–ø—É—Å–∫–∞–µ—Ç! –ù–∞–¥–æ –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –ø–æ–∫–∞ –Ω–µ –∑–∞–¥—É—à–∏–ª –≤—Å–µ—Ö —Å–≤–æ–µ–π —Å–ª–∞–¥–æ—Å—Ç—å—é."
    },
    "fears": {
        "monster": "–ú–æ–Ω—Å—Ç—Ä –ø–æ–¥ –∫—Ä–æ–≤–∞—Ç—å—é –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –±–æ–∏—Ç—Å—è —â–µ–∫–æ—Ç–∫–∏! –°—É–º–µ–µ—à—å –µ–≥–æ –ø–æ–¥—Ä—É–∂–∏—Ç—å –∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±–æ—è—Ç—å—Å—è —Å–∞–º–æ–º—É?",
        "snore": "–í —ç—Ç–æ–º –¥–æ–º–µ –∂–∏–≤—ë—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö—Ä–∞–ø ‚Äî –∏ –æ–Ω –Ω–µ –¥–∞—ë—Ç —Å–ø–∞—Ç—å –Ω–∏–∫–æ–º—É. –ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –¥–æ–º, –Ω–µ —Ä–∞–∑–±—É–¥–∏–≤ –µ–≥–æ!",
        "spider": "–≠—Ç–æ—Ç –ø–∞—É–∫ –ø—Ä—è—á–µ—Ç –≤—Å–µ –Ω–æ—Å–∫–∏ –∏ —Å–º–µ—ë—Ç—Å—è. –ü–æ—Ä–∞ –ø–æ–ª–æ–∂–∏—Ç—å –∫–æ–Ω–µ—Ü –µ–≥–æ –ø—Ä–æ–¥–µ–ª–∫–∞–º!",
        "cat": "–ú–∞–ª–µ–Ω—å–∫–∏–π –∫–æ—Ç –∑–∞—Å—Ç—Ä—è–ª –≤ —Å—Ç—Ä–∞—à–Ω–æ–π –∫–æ—Ä–æ–±–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –ø—É–≥–∞–µ—Ç –≤—Å–µ—Ö –≥—Ä–æ–º–∫–∏–º ¬´–ë—É—É—É!¬ª. –ü–æ–º–æ–∂–µ—à—å –µ–≥–æ —Å–ø–∞—Å—Ç–∏?",
        "light": "–≠—Ç–æ—Ç —Å–≤–µ—Ç–ª—è—á–æ–∫ —Å–≤–µ—Ç–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø—É–∫–∞–µ—Ç! –° –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –æ—Å–≤–µ—Ç–∏—Ç—å —Å–∞–º—ã–π —Ç—ë–º–Ω—ã–π —É–≥–æ–ª.",
        "doubt": "–ú–æ–Ω—Å—Ç—Ä –°–æ–º–Ω–µ–Ω–∏—è —à–µ–ø—á–µ—Ç: ¬´–¢—ã –Ω–µ —Å–º–æ–∂–µ—à—å¬ª. –ù—É–∂–Ω–æ –µ–≥–æ –ø—Ä–æ–≥–Ω–∞—Ç—å –∏ –ø–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–µ–±—è!",
        "city": "–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –≤—Å–µ –±–æ—è—Ç—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å –≤—Å–ª—É—Ö, –∏ –≤—Å—ë —Ç–æ–ª—å–∫–æ —à–µ–ø—á–µ—Ç. –°–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ç–∞–º –¥—Ä—É–∑–µ–π –∏ —Ä–∞–∑–≥–∞–¥–∞—Ç—å —Ç–∞–π–Ω—É?",
        "closet": "–ö–∞–∂–¥—É—é –Ω–æ—á—å —Ç–∞–º —à—É—Ä—à–∏—Ç —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞—à–Ω–æ–µ, –∞ –æ–∫–∞–∑–∞–ª–æ—Å—å ‚Äî —ç—Ç–æ –¢—Ä—É—Å–∏—à–∫–∏–Ω-–û–¥–µ—è–ª–æ! –í—ã—è—Å–Ω–∏, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç."
    },
    "toys": {
        "rock": "–¢–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä—É—à–∫–∞ —Å–±–µ–∂–∞–ª–∞ –∏ —Ç–µ–ø–µ—Ä—å –¥–∞—ë—Ç —Ä–æ–∫-–∫–æ–Ω—Ü–µ—Ä—Ç—ã! –ü–æ–º–æ–∂–µ—à—å –µ—ë –≤–µ—Ä–Ω—É—Ç—å –¥–æ–º–æ–π?",
        "nose": "–£ –ø–ª—é—à–µ–≤–æ–≥–æ –º–µ–¥–≤–µ–¥—è –ø–æ—Ç–µ—Ä—è–ª—Å—è –Ω–æ—Å ‚Äî –∞ —Ç–µ–ø–µ—Ä—å –æ–Ω —Å—Ç–∞–ª –∫–æ–º–ø–∞—Å–æ–º! –ù–∞–¥–æ –µ–≥–æ –Ω–∞–π—Ç–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –º–µ—Å—Ç–æ.",
        "city": "–ù–∞ –∏–≥—Ä—É—à–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–∞–ø–∞–ª–∏ –∑–ª—ã–µ —Ç–∞–ø–∫–∏. –°–º–æ–∂–µ—à—å –≤—Å–µ—Ö —Å–ø–∞—Å—Ç–∏?",
        "magic": "–≠—Ç–∞ –∏–≥—Ä—É—à–∫–∞ –ª–æ–º–∞–µ—Ç—Å—è –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –≤ –ø–∏—Ü—Ü—É! –°—Ä–æ—á–Ω–æ –ø–æ—á–∏–Ω–∏ –µ—ë.",
        "soldiers": "–ê—Ä–º–∏—è —Å–æ–ª–¥–∞—Ç–∏–∫–æ–≤ —É—Å–Ω—É–ª–∞ –ø—Ä—è–º–æ –Ω–∞ –ø–æ—Å—Ç—É. –ù—É–∂–Ω–æ –∏—Ö —Ä–∞–∑–±—É–¥–∏—Ç—å, –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–∞—Å—å –±–µ–¥–∞.",
        "lego": "–õ–µ–≥–æ-–≥–µ—Ä–æ—é –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—É—Å–æ—á–∫–∞ ‚Äî –±—É–∫–≤–∞–ª—å–Ω–æ! –ü–æ–º–æ–∂–µ—à—å –µ–º—É –Ω–∞–π—Ç–∏ –µ–≥–æ?",
        "box": "–í—Å–µ –∏–≥—Ä—É—à–∫–∏ –∏—Å—á–µ–∑–ª–∏ –∏–∑ –∫–æ—Ä–æ–±–∫–∏, –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ —Å—ã—Ä. –†–∞–∑–±–µ—Ä–∏—Å—å, –∫—É–¥–∞ –æ–Ω–∏ –¥–µ–ª–∏—Å—å!",
        "spring": "–ó–ª–∞—è –ü—Ä—É–∂–∏–Ω–∫–∞ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ—Ö —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ü–æ—Ä–∞ —Å –Ω–µ–π –ø–æ–∫–æ–Ω—á–∏—Ç—å!"
    },
    "food": {
        "queen": "–ö–æ—Ä–æ–ª–µ–≤–∞ –ö–æ–Ω—Ñ–µ—Ç–∞ –≤ –ø–ª–µ–Ω—É –≤ –∑–∞–º–∫–µ –õ–µ–¥–µ–Ω—Ü–æ–≤, –∏ –°–ª—é–Ω—è–≤—ã–π –í–µ–ª–∏–∫–∞–Ω —É–∂–µ –∏–¥—ë—Ç –∑–∞ –Ω–µ–π! –°–ø–∞—Å—ë—à—å –µ—ë?",
        "jelly": "–ñ–µ–ª–µ-–º–æ–Ω—Å—Ç—Ä —É–∫—Ä–∞–ª –≤—Å–µ –ª–æ–∂–∫–∏! –ö–∞–∫ –∂–µ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –¥–µ—Å–µ—Ä—Ç? –ù–∞–¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ!",
        "rain": "–ë–µ–∑ –∫–ª—É–±–Ω–∏—á–Ω–æ–≥–æ –¥–æ–∂–¥—è –∑–µ–º–ª—è–Ω–∏–∫–∞ –Ω–µ —Ä–∞—Å—Ç—ë—Ç. –ù—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ –º–∏—Ä —Å–ª–∞–¥–æ—Å—Ç–µ–π!",
        "soup": "–ì–æ–≤–æ—Ä—è—Ç, –µ—Å—Ç—å —Å—É–ø, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –ª–µ—Ç–∞—Ç—å. –ù–æ –µ–≥–æ —Ä–µ—Ü–µ–ø—Ç –∫—É–¥–∞-—Ç–æ –ø—Ä–æ–ø–∞–ª‚Ä¶",
        "cake": "–≠—Ç–æ—Ç —Ç–æ—Ä—Ç –¥—Ä–∞–∑–Ω–∏—Ç—Å—è –∫—Ä–µ–º–æ–≤—ã–º–∏ —à—É—Ç–∫–∞–º–∏ –∏ –≤—Å–µ—Ö –æ–±–∏–∂–∞–µ—Ç. –ü–µ—Ä–µ–ø–µ–∫–∏ –µ–≥–æ –ø–æ-–¥–æ–±—Ä–æ–º—É!",
        "marsh": "–ó–µ—Ñ–∏—Ä–Ω—ã–µ –≤–æ–∏–Ω—ã –∑–∞–ø–µ—Ä—Ç—ã –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–π —Ç–µ–º–Ω–∏—Ü–µ. –û—Å–≤–æ–±–æ–¥–∏ –∏—Ö!",
        "bridge": "–ß–µ—Ä–µ–∑ –õ–∞–≤–∞-–ö–µ—Ç—á—É–ø –Ω–µ –ø–µ—Ä–µ–π—Ç–∏ –±–µ–∑ –º–æ—Å—Ç–∞ –∏–∑ —Å–ø–∞–≥–µ—Ç—Ç–∏. –ü–æ–º–æ–∂–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å?",
        "carrot": "–°—É–ø –∑–∞–∫–æ–ª–¥–æ–≤–∞–ª –º–∞–º—É –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª –µ—ë –≤ –º–æ—Ä–∫–æ–≤–∫—É! –ü–æ—Ä–∞ –µ—ë –≤–µ—Ä–Ω—É—Ç—å!"
    },
    "dreams": {
        "clock": "–≠—Ç–∏ —Å—Ç—Ä–∞–Ω–Ω—ã–µ —á–∞—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç –¥–µ–Ω—å —Å —É–∂–∏–Ω–∞! –ù–∞–¥–æ –∏—Ö –ø–æ—á–∏–Ω–∏—Ç—å, –ø–æ–∫–∞ –≤—Å—ë –Ω–µ –∑–∞–ø—É—Ç–∞–ª–æ—Å—å.",
        "snail": "–¢–≤–æ–π –¥—Ä—É–≥ –∑–∞—Å—Ç—Ä—è–ª –≤ —Å–Ω–µ, –≥–¥–µ –≤—Å–µ –¥–≤–∏–≥–∞—é—Ç—Å—è, –∫–∞–∫ —É–ª–∏—Ç–∫–∏. –ü–æ–º–æ–∂–µ—à—å –µ–º—É –≤—ã–±—Ä–∞—Ç—å—Å—è?",
        "repeat": "–ü–æ–≤—Ç–æ—Ä—è—à–∫–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π. –†–∞–∑–æ—Ä–≤—ë—à—å —ç—Ç–æ –∑–∞–∫–æ–ª–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª—å—Ü–æ?",
        "pillow": "–í –ª–∞–±–∏—Ä–∏–Ω—Ç–µ —Å–Ω–æ–≤ —Å–ø—Ä—è—Ç–∞–Ω–∞ –ø–æ–¥—É—à–∫–∞-—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å. –¢–æ–ª—å–∫–æ –æ–Ω–∞ —É–º–µ–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Ç—å –Ω–∞–∑–∞–¥.",
        "dreamer": "–°–Ω–æ–≤–∏–¥—Ü–∞ –ø–æ–π–º–∞–ª–∞ –ª–æ–≤—É—à–∫–∞ –ó–∞–±–≤–µ–Ω–∏—è ‚Äî –±–µ–∑ –Ω–µ–≥–æ –º–∏—Ä —Å–Ω–æ–≤ –∏—Å—á–µ–∑–Ω–µ—Ç!",
        "toy": "–ì–¥–µ-—Ç–æ –≤ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–∏ —Å–ø—Ä—è—Ç–∞–ª–∞—Å—å —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä—É—à–∫–∞. –¢—ã —Å–º–æ–∂–µ—à—å –µ—ë –Ω–∞–π—Ç–∏?",
        "alarm": "–≠—Ç–æ—Ç –±—É–¥–∏–ª—å–Ω–∏–∫ —Ä–∞–∑—Ä—É—à–∞–µ—Ç –≤—Å–µ —Å–Ω—ã –∏ –æ—Ä—ë—Ç \"–ü–æ–¥—ä—ë–º!\". –ù–∞–¥–æ –µ–≥–æ —É—Å–ø–æ–∫–æ–∏—Ç—å!",
        "funny": "–ü—Ä–∏–¥—É–º–∞–π —Ç–∞–∫–æ–π —Å–º–µ—à–Ω–æ–π –∏ —Ä–∞–¥–æ—Å—Ç–Ω—ã–π —Å–æ–Ω, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –≤–µ—Å—å –º–∏—Ä –æ—Ç —Å–∫—É–∫–∏."
    },
    "build": {
        "bridge": "–ú–æ—Å—Ç –∏–∑ –ª–µ–≥–æ —Ä–∞–∑–≤–∞–ª–∏–ª—Å—è, –∞ –ø–æ –Ω–µ–º—É –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–±–µ–≥–∞—Ç—å –ø–æ–µ–∑–¥–∞. –°—Ä–æ—á–Ω–æ —á–∏–Ω–∏–º!",
        "crane": "–≠—Ç–æ—Ç –∑–∞–±—ã–≤—á–∏–≤—ã–π –∫—Ä–∞–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ç–µ—Ä—è–µ—Ç –¥–æ–º–∞ –∏ –ø—É—Ç–∞–µ—Ç —ç—Ç–∞–∂–∏. –ù–∞–¥–æ –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!",
        "house": "–û–≥—Ä–æ–º–Ω—ã–π –ø–∏–Ω–≥–≤–∏–Ω —Ö–æ—á–µ—Ç —É—é—Ç–Ω—ã–π –¥–æ–º ‚Äî –¥–∞–≤–∞–π –ø–æ–º–æ–∂–µ–º –µ–º—É —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–æ–π!",
        "excavator": "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –∑–∞—Å—Ç—Ä—è–ª –ø—Ä—è–º–æ –≤ –∫—É—á–µ –ø–µ–ª—å–º–µ–Ω–µ–π. –í—ã—Ç–∞—â–∏—à—å –µ–≥–æ?",
        "rainbow": "–ò–∑–æ–±—Ä–µ—Å—Ç–∏ –º–∞—à–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –º—É—Å–æ—Ä –≤ —Ä–∞–¥—É–≥—É ‚Äî –∫—Ä—É—Ç–∞—è –º–∏—Å—Å–∏—è!",
        "tunnel": "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∑–µ–º–Ω—ã–π –ø—É—Ç—å, —á—Ç–æ–±—ã —Å–±–µ–∂–∞—Ç—å –Ω–∞ –ø–∏–∫–Ω–∏–∫. –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ!",
        "elevator": "–õ–∏—Ñ—Ç –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ –ø–æ—Ä—Ç–∞–ª –≤ –¥–∂—É–Ω–≥–ª–∏ –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—é–¥–µ–π. –ù–∞–¥–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!",
        "tower": "–ë–∞—à–Ω—è, —É—Ö–æ–¥—è—â–∞—è –ø—Ä—è–º–æ –≤ –æ–±–ª–∞–∫–∞. –ö—Ç–æ —Å–º–æ–∂–µ—Ç –µ—ë –¥–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞?"
    },
    "nature": {
        "ant": "–ú—É—Ä–∞–≤–µ–π-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å—Ç—Ä–æ–∏–ª –≥–æ—Ä–æ–¥, –Ω–æ –æ–≥—Ä–æ–º–Ω–∞—è –ª—É–∂–∞-—Ü—É–Ω–∞–º–∏ —Å–º—ã–ª–∞ –≤—Å—ë! –ü–æ–º–æ–∂–µ—à—å –µ–≥–æ —Å–ø–∞—Å—Ç–∏?",
        "butterfly": "–ú–∞–ª–µ–Ω—å–∫–∞—è –±–∞–±–æ—á–∫–∞ –±–æ–∏—Ç—Å—è –ª–µ—Ç–∞—Ç—å –≤—ã—Å–æ–∫–æ. –°—É–º–µ–µ—à—å –µ—ë –Ω–∞—É—á–∏—Ç—å –Ω–µ –±–æ—è—Ç—å—Å—è?",
        "mosquito": "–≠—Ç–æ—Ç –∫–æ–≤–∞—Ä–Ω—ã–π –∫–æ–º–∞—Ä —Å–æ—Å—ë—Ç –Ω–µ –∫—Ä–æ–≤—å, –∞ –º–µ—á—Ç—ã. –ù–∞–¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ, –ø–æ–∫–∞ –æ–Ω –Ω–µ –≤—ã–ø–∏–ª –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ —É –≤—Å–µ—Ö!",
        "forest": "–î–µ—Ä–µ–≤—å—è –≤ —ç—Ç–æ–º –ª–µ—Å—É —Ö–æ–¥—è—Ç, —à–µ–ø—á—É—Ç —Å–∫–∞–∑–∫–∏ –∏ –ø—Ä—è—á—É—Ç –ø—É—Ç—å. –°—É–º–µ–µ—à—å –≤—ã–±—Ä–∞—Ç—å—Å—è?",
        "owl": "–ú–∞–ª–µ–Ω—å–∫–∏–π —Å–æ–≤—ë–Ω–æ–∫ –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ—ë –≥–Ω–µ–∑–¥–æ, –∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω–∞—Ä–∏–∫. –ù—É–∂–Ω–æ –µ–≥–æ –Ω–∞–π—Ç–∏!",
        "bugs": "–¢–≤–æ–∏ –¥—Ä—É–∑—å—è ‚Äî –∂—É–∫–∏. –ò–º –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π –¥–æ–º. –ü–æ—Å—Ç—Ä–æ–∏—à—å?",
        "snails": "–£—Å—Ç—Ä–æ–∏–º –±–µ–∑—É–º–Ω—ã–µ –≥–æ–Ω–∫–∏ –Ω–∞ —É–ª–∏—Ç–∫–∞—Ö –ø—Ä—è–º–æ –ø–æ –∫–∞–ø–ª—è–º —Ä–æ—Å—ã! –ì–æ—Ç–æ–≤ –∫ –º–æ–∫—Ä–æ–º—É –±–µ–∑—É–º–∏—é?",
        "bee": "–ü—á–µ–ª–∞-–∫–æ—Ä–æ–ª–µ–≤–∞ —É—Å–Ω—É–ª–∞ –ø—Ä—è–º–æ –≤ —Ü–≤–µ—Ç–∫–µ. –ë–µ–∑ –Ω–µ—ë —É–ª—å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç! –ü–æ—Ä–∞ –µ—ë –±—É–¥–∏—Ç—å!"
    },
    "invent": {
        "invisible": "–ù–µ–≤–∏–¥–∏–º–∫–∞ —Å—Ç—Ä–∞–¥–∞–µ—Ç ‚Äî —É –Ω–µ–≥–æ —á–µ—à–µ—Ç—Å—è —Å–ø–∏–Ω–∞! –ü—Ä–∏–¥—É–º–∞–π –¥–ª—è –Ω–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —á–µ—à—É—â—É—é –º–∞—à–∏–Ω—É.",
        "slippers": "–í –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –≤—Å—ë –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —Ç–∞–ø–∫–∏ –æ–∂–∏–ª–∏ –∏ –≤–µ–¥—É—Ç —Å–µ–±—è, –∫–∞–∫ –≥–µ–Ω–∏–∏ –∑–ª–∞! –ù–∞–¥–æ —Å–ø–∞—Å–∞—Ç—å —É—á—ë–Ω—ã—Ö.",
        "brush": "–ü–æ–ª—ë—Ç –Ω–∞ –∑—É–±–Ω–æ–π —â—ë—Ç–∫–µ ‚Äî –Ω–µ —à—É—Ç–∫–∞! –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —à–æ–∫–æ–ª–∞–¥–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞. –°–º–æ–∂–µ—à—å –¥–æ–ª–µ—Ç–µ—Ç—å?",
        "alarm": "–≠—Ç–æ—Ç –±—É–¥–∏–ª—å–Ω–∏–∫ –ø–æ—ë—Ç –ø–µ—Å–Ω–∏‚Ä¶ –≥–æ–ª–æ—Å–æ–º –∫–æ—Ç–∞. –ü–æ—Å—Ç—Ä–æ–π –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—å, –ø—Ä–æ—Å–Ω—É—Ç—Å—è –ª–∏ –≤—Å–µ.",
        "button": "–ò–∑–æ–±—Ä–µ—Ç–∏ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç!",
        "helmet": "–®–ª–µ–º —Å–ª—É—á–∞–π–Ω–æ —Å—Ç–∞–ª –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –º—ã—Å–ª–∏ –≤ –ø–µ–ª—å–º–µ–Ω–∏. –°—Ä–æ—á–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–ª–æ –≤–∫—É—Å–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞.",
        "fridge": "–≠—Ç–æ—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –º–µ—á—Ç–∞–µ—Ç —Å—Ç–∞—Ç—å –ø–µ–≤—Ü–æ–º. –°—É–º–µ–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ –º–µ—á—Ç—É –∏ –ø–æ–¥—Ä—É–∂–∏—Ç—å—Å—è —Å –Ω–∏–º?",
        "umbrella": "–ü—Ä–∏–¥—É–º–∞–π –∑–æ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç —Ä–∞–¥—É–≥—É, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ. –û–Ω –Ω—É–∂–µ–Ω –≤—Å–µ–º—É –º–∏—Ä—É!"
    }
}

# –ù–∞–∑–≤–∞–Ω–∏—è —Å—é–∂–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
PLOT_NAMES = {
    "magic": {
        "princess": "üßù‚Äç‚ôÄÔ∏è –°–ø–∞—Å—Ç–∏ –ø—Ä–∏–Ω—Ü–µ—Å—Å—É",
        "dragon": "üêâ –ü–æ–±–µ–¥–∏—Ç—å –¥—Ä–∞–∫–æ–Ω–∞", 
        "tournament": "üßô –¢—É—Ä–Ω–∏—Ä –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–≤",
        "spell": "‚ú® –ù–∞–π—Ç–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ",
        "school": "üè´ –°–ø–∞—Å—Ç–∏ —à–∫–æ–ª—É –º–∞–≥–∏–∏",
        "castle": "üè∞ –†–∞—Å–∫–æ–ª–¥–æ–≤–∞—Ç—å –∑–∞–º–æ–∫",
        "teacher": "üë®‚Äçüè´ –í–µ—Ä–Ω—É—Ç—å —É—á–∏—Ç–µ–ª—è",
        "witch": "üßÅ –ü–æ–π–º–∞—Ç—å –≤–µ–¥—å–º—É"
    },
    "space": {
        "candy": "üç≠ –ü–ª–∞–Ω–µ—Ç–∞ —Å–ª–∞–¥–æ—Å—Ç–µ–π",
        "race": "‚òÑÔ∏è –ì–æ–Ω–∫–∏ –Ω–∞ –∞—Å—Ç–µ—Ä–æ–∏–¥–µ",
        "robot": "ü§ñ –ù–∞–π—Ç–∏ —Ä–æ–±–æ—Ç–∞",
        "king": "ü™ê –ü–æ–±–µ–¥–∏—Ç—å –ö–æ—Ä–æ–ª—è –ú–µ—Ç–µ–æ—Ä–∏—Ç–æ–≤",
        "rocket": "üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∫–µ—Ç—É",
        "mars": "üõ∏ –°–ø–∞—Å—Ç–∏ –º–∞—Ä—Å–∏–∞–Ω",
        "planet": "üåå –í–µ—Ä–Ω—É—Ç—å—Å—è —Å –ø–ª–∞–Ω–µ—Ç—ã",
        "donut": "üç© –ü–æ–±–µ–¥–∏—Ç—å –ø–æ–Ω—á–∏–∫–∞"
    },
    "fears": {
        "monster": "üëæ –ü–æ–¥—Ä—É–∂–∏—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–æ–º",
        "snore": "üí§ –î–æ–º —Ö—Ä–∞–ø–∞",
        "spider": "üï∑ –ü–æ–±–µ–¥–∏—Ç—å –ü–∞—É–∫–∞-–®—É—Ç–Ω–∏–∫–∞",
        "cat": "üê± –°–ø–∞—Å—Ç–∏ –∫–æ—Ç–∞",
        "light": "üî¶ –ù–∞–π—Ç–∏ —Å–≤–µ—Ç–ª—è—á–∫–∞",
        "doubt": "üòà –ü–æ–±–µ–¥–∏—Ç—å –°–æ–º–Ω–µ–Ω–∏—è",
        "city": "üèô –ü—Ä–æ–π—Ç–∏ –≥–æ—Ä–æ–¥ —à—ë–ø–æ—Ç–æ–≤",
        "closet": "üëª –¢–∞–π–Ω–∞ —à–æ—Ä–æ—Ö–∞ –≤ —à–∫–∞—Ñ—É"
    },
    "toys": {
        "rock": "üé∏ –í–µ—Ä–Ω—É—Ç—å —Ä–æ–∫-–∑–≤–µ–∑–¥—É",
        "nose": "üß≠ –ù–æ—Å –º–µ–¥–≤–µ–¥—è",
        "city": "üëû –°–ø–∞—Å—Ç–∏ –≥–æ—Ä–æ–¥",
        "magic": "üçï –ü–æ—á–∏–Ω–∏—Ç—å –∏–≥—Ä—É—à–∫—É",
        "soldiers": "ü™ñ –†–∞–∑–±—É–¥–∏—Ç—å —Å–æ–ª–¥–∞—Ç–∏–∫–æ–≤",
        "lego": "üß© –ù–∞–π—Ç–∏ –∫—É—Å–æ—á–µ–∫",
        "box": "üì¶ –í–µ—Ä–Ω—É—Ç—å –∫–æ—Ä–æ–±–∫—É",
        "spring": "üåÄ –ü–æ–±–æ—Ä–æ—Ç—å –ü—Ä—É–∂–∏–Ω–∫—É"
    },
    "food": {
        "queen": "üç¨ –°–ø–∞—Å—Ç–∏ –∫–æ—Ä–æ–ª–µ–≤—É",
        "jelly": "üçÆ –ü–æ–±–µ–¥–∏—Ç—å –ñ–µ–ª–µ-–º–æ–Ω—Å—Ç—Ä–∞",
        "rain": "üçì –í–µ—Ä–Ω—É—Ç—å –¥–æ–∂–¥—å",
        "soup": "üç≤ –ù–∞–π—Ç–∏ —Å—É–ø",
        "cake": "üéÇ –ü–µ—Ä–µ–ø–µ—á—å —Ç–æ—Ä—Ç",
        "marsh": "üç° –û—Å–≤–æ–±–æ–¥–∏—Ç—å –∑–µ—Ñ–∏—Ä—ã",
        "bridge": "üçù –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ—Å—Ç",
        "carrot": "ü•ï –°–ø–∞—Å—Ç–∏ –º–∞–º—É-–º–æ—Ä–∫–æ–≤–∫—É"
    },
    "dreams": {
        "clock": "‚è∞ –ü–æ—á–∏–Ω–∏—Ç—å —á–∞—Å—ã",
        "snail": "üêå –û—Å–≤–æ–±–æ–¥–∏—Ç—å –¥—Ä—É–≥–∞",
        "repeat": "üîÅ –ü–æ–±–µ–¥–∏—Ç—å –ü–æ–≤—Ç–æ—Ä—è—à–∫—É",
        "pillow": "üõå –ù–∞–π—Ç–∏ –ø–æ–¥—É—à–∫—É",
        "dreamer": "üå† –°–ø–∞—Å—Ç–∏ –°–Ω–æ–≤–∏–¥—Ü–∞",
        "toy": "üß∏ –ù–∞–π—Ç–∏ –∏–≥—Ä—É—à–∫—É",
        "alarm": "üì¢ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫",
        "funny": "üòÇ –ü—Ä–∏–¥—É–º–∞—Ç—å —Å–æ–Ω"
    },
    "build": {
        "bridge": "üß© –ü–æ—á–∏–Ω–∏—Ç—å –º–æ—Å—Ç",
        "crane": "üèó –ü–æ–±–µ–¥–∏—Ç—å –ö—Ä–∞–Ω–∞",
        "house": "üè† –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º",
        "excavator": "üöú –°–ø–∞—Å—Ç–∏ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä",
        "rainbow": "üåà –°–æ–∑–¥–∞—Ç—å –º–∞—à–∏–Ω—É",
        "tunnel": "üï≥ –í—ã—Ä—ã—Ç—å —Ö–æ–¥",
        "elevator": "üõó –û—Å–≤–æ–±–æ–¥–∏—Ç—å –ª–∏—Ñ—Ç",
        "tower": "‚òÅÔ∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∞—à–Ω—é"
    },
    "nature": {
        "ant": "üêú –°–ø–∞—Å—Ç–∏ –º—É—Ä–∞–≤—å—è",
        "butterfly": "ü¶ã –ü–æ–º–æ—á—å –±–∞–±–æ—á–∫–µ",
        "mosquito": "ü¶ü –ü–æ–±–µ–¥–∏—Ç—å –∫–æ–º–∞—Ä–∞",
        "forest": "üå≤ –ü—Ä–æ–π—Ç–∏ –ª–µ—Å",
        "owl": "ü¶â –ù–∞–π—Ç–∏ –≥–Ω–µ–∑–¥–æ",
        "bugs": "üè° –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º –∂—É–∫–∞–º",
        "snails": "üêå –ì–æ–Ω–∫–∏ –Ω–∞ —É–ª–∏—Ç–∫–∞—Ö",
        "bee": "üêù –†–∞–∑–±—É–¥–∏—Ç—å –ø—á–µ–ª—É"
    },
    "invent": {
        "invisible": "ü§ñ –ú–∞—à–∏–Ω–∞ –¥–ª—è –Ω–µ–≤–∏–¥–∏–º–∫–∏",
        "slippers": "ü©¥ –û–∂–∏–≤—à–∏–µ —Ç–∞–ø–∫–∏",
        "brush": "ü™• –†–µ–∞–∫—Ç–∏–≤–Ω–∞—è —â—ë—Ç–∫–∞",
        "alarm": "üéµ –ë—É–¥–∏–ª—å–Ω–∏–∫-–∫–æ—Ç",
        "button": "üòä –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        "helmet": "üß† –®–ª–µ–º-–ø–µ–ª—å–º–µ–Ω–µ–º—ë—Ç",
        "fridge": "üßä –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫-–ø–µ–≤–µ—Ü",
        "umbrella": "üåà –ó–æ–Ω—Ç —Ä–∞–¥—É–≥–∏"
    }
}

# ==================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====================
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== –ÆKassa API ====================
def create_yukassa_payment(amount, description, user_id, tariff):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
        idempotence_key = str(uuid.uuid4())
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        payment_data = {
            "amount": {
                "value": str(amount),
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/fairytales_skazki_bot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –±–æ—Ç
            },
            "capture": True,
            "description": description,
            "metadata": {
                "user_id": str(user_id),
                "tariff": tariff,
                "bot_payment": "true"
            }
        }
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            "Idempotence-Key": idempotence_key,
            "Content-Type": "application/json"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ÆKassa
        response = requests.post(
            YUKASSA_API_URL,
            json=payment_data,
            headers=headers,
            auth=(YUKASSA_SHOP_ID, YUKASSA_SECRET_KEY)
        )
        
        if response.status_code == 200:
            payment_info = response.json()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_payment_info(
                payment_info["id"],
                user_id,
                tariff,
                amount,
                payment_info["status"]
            )
            
            return payment_info
        else:
            logger.error(f"–ÆKassa API error: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"Error creating –ÆKassa payment: {str(e)}")
        return None

def save_payment_info(payment_id, user_id, tariff, amount, status):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        c.execute("""INSERT OR REPLACE INTO payments 
                     (id, user_id, tariff, amount, status, created_at, updated_at) 
                     VALUES (?, ?, ?, ?, ?, ?, ?)""",
                  (payment_id, user_id, tariff, amount, status, 
                   datetime.now().isoformat(), datetime.now().isoformat()))
        
        conn.commit()
        conn.close()
        
        logger.info(f"Payment info saved: {payment_id}")
        
    except Exception as e:
        logger.error(f"Error saving payment info: {str(e)}")

def check_payment_status(payment_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
    try:
        response = requests.get(
            f"{YUKASSA_API_URL}/{payment_id}",
            auth=(YUKASSA_SHOP_ID, YUKASSA_SECRET_KEY)
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"Error checking payment status: {response.status_code}")
            return None
            
    except Exception as e:
        logger.error(f"Error checking payment status: {str(e)}")
        return None

def update_payment_status(payment_id, status):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("UPDATE payments SET status = ?, updated_at = ? WHERE id = ?",
                  (status, datetime.now().isoformat(), payment_id))
        conn.commit()
        conn.close()
        logger.info(f"Payment status updated: {payment_id} -> {status}")
    except Exception as e:
        logger.error(f"Error updating payment status: {str(e)}")

def activate_subscription(user_id, tariff):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        end_date = datetime.now() + timedelta(days=TARIFFS[tariff]["duration_days"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute("""UPDATE users 
                     SET subscription = ?, subscription_end = ?, stories_used = 0, last_paid = ?
                     WHERE id = ?""",
                  (tariff, end_date.isoformat(), datetime.now().isoformat(), user_id))
        
        conn.commit()
        conn.close()
        
        logger.info(f"Subscription activated for user {user_id}: {tariff}")
        
    except Exception as e:
        logger.error(f"Error activating subscription: {str(e)}")

# ==================== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ====================
def ensure_column_exists(conn, table, column, coltype):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    c = conn.cursor()
    c.execute(f"PRAGMA table_info({table})")
    columns = [row[1] for row in c.fetchall()]
    if column not in columns:
        # –î–ª—è SQLite –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ DEFAULT –∑–Ω–∞—á–µ–Ω–∏—è
        if "DEFAULT 0" in coltype:
            c.execute(f"ALTER TABLE {table} ADD COLUMN {column} INTEGER DEFAULT 0")
        elif "DEFAULT CURRENT_TIMESTAMP" in coltype:
            c.execute(f"ALTER TABLE {table} ADD COLUMN {column} TEXT")
        elif "DEFAULT 'UTC'" in coltype:
            c.execute(f"ALTER TABLE {table} ADD COLUMN {column} TEXT DEFAULT 'UTC'")
        else:
            c.execute(f"ALTER TABLE {table} ADD COLUMN {column} {coltype}")
        conn.commit()
        logger.info(f"Column '{column}' added to table '{table}'.")

def load_prices_from_db():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global TARIFFS
    try:
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='settings'")
        if not c.fetchone():
            conn.close()
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        c.execute("SELECT key, value FROM settings WHERE key LIKE '%_price'")
        prices = c.fetchall()
        
        for key, value in prices:
            try:
                price_value = int(value)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int
                if key == "week_price":
                    TARIFFS["week"]["price"] = price_value
                elif key == "month_price":
                    TARIFFS["month"]["price"] = price_value
                elif key == "year_price":
                    TARIFFS["year"]["price"] = price_value
            except (ValueError, TypeError):
                logger.warning(f"Invalid price value for {key}: {value}")
                continue
        
        conn.close()
        logger.info("Prices loaded from database")
        
    except Exception as e:
        logger.error(f"Error loading prices from database: {str(e)}")
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            name TEXT,
            age INTEGER,
            subscription TEXT,
            subscription_end TEXT,
            stories_used INTEGER DEFAULT 0,
            last_paid TEXT,
            timezone TEXT DEFAULT 'UTC',
            is_blocked INTEGER DEFAULT 0,
            is_tester INTEGER DEFAULT 0,
            agreed_terms INTEGER DEFAULT 0  -- –°—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è
        )
    """)
    
    c.execute("""
        CREATE TABLE IF NOT EXISTS stories (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            title TEXT,
            content TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
    c.execute("""CREATE TABLE IF NOT EXISTS prompts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        role TEXT UNIQUE,
        content TEXT
    )""")
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    c.execute("""
        CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT
        )
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –ÆKassa
    c.execute("""
        CREATE TABLE IF NOT EXISTS payments (
            id TEXT PRIMARY KEY,
            user_id INTEGER,
            tariff TEXT,
            amount INTEGER,
            status TEXT,
            created_at TEXT,
            updated_at TEXT,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    """)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    ensure_column_exists(conn, "users", "is_blocked", "INTEGER DEFAULT 0")
    ensure_column_exists(conn, "users", "is_tester", "INTEGER DEFAULT 0")
    ensure_column_exists(conn, "users", "subscription", "TEXT")
    ensure_column_exists(conn, "users", "subscription_end", "TEXT")
    ensure_column_exists(conn, "users", "stories_used", "INTEGER DEFAULT 0")
    ensure_column_exists(conn, "users", "last_paid", "TEXT")
    ensure_column_exists(conn, "users", "timezone", "TEXT DEFAULT 'UTC'")
    ensure_column_exists(conn, "users", "agreed_terms", "INTEGER DEFAULT 0")
    ensure_column_exists(conn, "stories", "created_at", "TEXT")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        c.execute("UPDATE users SET stories_used = 0 WHERE stories_used IS NULL OR stories_used = ''")
        c.execute("UPDATE users SET is_blocked = 0 WHERE is_blocked IS NULL OR is_blocked = ''")
        c.execute("UPDATE users SET is_tester = 0 WHERE is_tester IS NULL OR is_tester = ''")
        c.execute("UPDATE users SET agreed_terms = 0 WHERE agreed_terms IS NULL OR agreed_terms = ''")
        c.execute("UPDATE users SET timezone = 'UTC' WHERE timezone IS NULL OR timezone = ''")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ stories_used (–µ—Å–ª–∏ —Ç–∞–º –ø–æ–ø–∞–ª–∏ —Å—Ç—Ä–æ–∫–∏)
        c.execute("""UPDATE users SET stories_used = 0 
                     WHERE typeof(stories_used) != 'integer' 
                     OR stories_used < 0""")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º created_at –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —ç—Ç–æ–≥–æ –ø–æ–ª—è
        c.execute("UPDATE stories SET created_at = datetime('now') WHERE created_at IS NULL OR created_at = ''")
        
    except Exception as e:
        logger.warning(f"Error fixing database values: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    c.execute("INSERT OR IGNORE INTO prompts (role, content) VALUES (?, ?)", 
              ("author", "–¢—ã ‚Äî –≤–æ–ª—à–µ–±–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∫–∞–∑–æ—á–Ω–∏–∫. –°–æ–∑–¥–∞–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é —Å–∫–∞–∑–∫—É."))
    c.execute("INSERT OR IGNORE INTO prompts (role, content) VALUES (?, ?)", 
              ("critic", "–¢—ã ‚Äî —Ä–µ–±—ë–Ω–æ–∫ 5-8 –ª–µ—Ç. –û—Ü–µ–Ω–∏ —Å–∫–∞–∑–∫—É –∏ —É–ª—É—á—à–∏ –µ—ë."))
    c.execute("INSERT OR IGNORE INTO prompts (role, content) VALUES (?, ?)", 
              ("final", "–°–æ–∑–¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∫–∞–∑–∫–∏ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π."))
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –µ—Å—Ç—å –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    c.execute("""INSERT OR REPLACE INTO users 
                 (id, name, age, stories_used, is_blocked, is_tester, timezone, agreed_terms) 
                 VALUES (?, ?, ?, 0, 0, 0, 'UTC', 1)""",
              (ADMIN_ID, "Admin", 99))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–µ—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
    for tester_id in TESTER_IDS:
        c.execute("""INSERT OR IGNORE INTO users 
                     (id, name, age, stories_used, is_blocked, is_tester, timezone, agreed_terms) 
                     VALUES (?, ?, ?, 0, 0, 1, 'UTC', 1)""",
                  (tester_id, f"Tester_{tester_id}", 25))
    
    conn.commit()
    conn.close()
    logger.info("Database initialized successfully")

def has_agreed_terms(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É—Å–ª–æ–≤–∏—è–º–∏"""
    user = get_user(user_id)
    if not user:
        return False
    return user.get('agreed_terms', 0) == 1

# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ ====================

async def show_prompt_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
    query = update.callback_query
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT role, content FROM prompts WHERE role IN ('author', 'critic')")
    prompts = dict(c.fetchall())
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –∞–≤—Ç–æ—Ä–∞", callback_data="edit_prompt_author")],
        [InlineKeyboardButton("üë∂ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –∫—Ä–∏—Ç–∏–∫–∞", callback_data="edit_prompt_critic")],
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã", callback_data="show_current_prompts")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º", callback_data="reset_prompts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    author_preview = prompts.get('author', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')[:100] + "..." if len(prompts.get('author', '')) > 100 else prompts.get('author', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    critic_preview = prompts.get('critic', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')[:100] + "..." if len(prompts.get('critic', '')) > 100 else prompts.get('critic', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    
    text = f"""üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏*

ü§ñ *–ü—Ä–æ–º–ø—Ç –∞–≤—Ç–æ—Ä–∞ (–ø—Ä–µ–≤—å—é):*
{author_preview}

üë∂ *–ü—Ä–æ–º–ø—Ç –∫—Ä–∏—Ç–∏–∫–∞ (–ø—Ä–µ–≤—å—é):*
{critic_preview}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_current_prompts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT role, content FROM prompts WHERE role IN ('author', 'critic')")
    prompts = dict(c.fetchall())
    conn.close()
    
    author_prompt = prompts.get('author', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    critic_prompt = prompts.get('critic', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏
    text = f"""üìã *–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã*

ü§ñ **–ü–†–û–ú–ü–¢ –ê–í–¢–û–†–ê:**
{author_prompt[:2000]}"""
    
    if len(author_prompt) > 2000:
        text += "...\n\n*(–ø—Ä–æ–º–ø—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)*"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_prompts")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –∫—Ä–∏—Ç–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    critic_text = f"""üë∂ **–ü–†–û–ú–ü–¢ –ö–†–ò–¢–ò–ö–ê:**
{critic_prompt[:2000]}"""
    
    if len(critic_prompt) > 2000:
        critic_text += "...\n\n*(–ø—Ä–æ–º–ø—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)*"
    
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=critic_text,
        parse_mode='Markdown'
    )
async def edit_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    prompt_type = query.data.split("_")[2]  # author –∏–ª–∏ critic
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT content FROM prompts WHERE role = ?", (prompt_type,))
    result = c.fetchone()
    current_prompt = result[0] if result else "–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    conn.close()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º –ø—Ä–æ–º–ø—Ç–µ
    context.user_data['editing_prompt'] = prompt_type
    context.user_data['prompt_step'] = 'waiting_prompt'
    
    prompt_names = {
        'author': '–∞–≤—Ç–æ—Ä–∞ —Å–∫–∞–∑–æ–∫',
        'critic': '–¥–µ—Ç—Å–∫–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞'
    }
    
    text = f"""‚úçÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ {prompt_names.get(prompt_type, prompt_type)}*

**–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:**
{current_prompt[:1500]}{'...' if len(current_prompt) > 1500 else ''}

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–∫—Å—Ç.

–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"""
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_prompts")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_prompt_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    if not context.user_data.get('editing_prompt') or context.user_data.get('prompt_step') != 'waiting_prompt':
        return False  # –ù–µ –Ω–∞—à —Å–ª—É—á–∞–π
    
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return True
    
    new_prompt = update.message.text.strip()
    prompt_type = context.user_data['editing_prompt']
    
    if len(new_prompt) < 10:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return True
    
    if len(new_prompt) > 10000:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 10000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO prompts (role, content) VALUES (?, ?)", 
              (prompt_type, new_prompt))
    conn.commit()
    conn.close()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop('editing_prompt', None)
    context.user_data.pop('prompt_step', None)
    
    prompt_names = {
        'author': '–∞–≤—Ç–æ—Ä–∞ —Å–∫–∞–∑–æ–∫',
        'critic': '–¥–µ—Ç—Å–∫–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞'
    }
    
    keyboard = [
        [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏", callback_data="admin_prompts")],
        [InlineKeyboardButton("üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ–º–ø—Ç {prompt_names.get(prompt_type, prompt_type)} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–∫–∞–∑–æ–∫.",
        reply_markup=reply_markup
    )
    
    logger.info(f"Prompt {prompt_type} updated by admin {update.effective_user.id}")
    return True

async def reset_prompts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    default_author_prompt = f"""–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∫–∞–∑–æ—á–Ω–∏–∫ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, –ª–∞—É—Ä–µ–∞—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —á–∏—Ç–∞—é—Ç –Ω–∞ –Ω–æ—á—å –¥–µ—Ç–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. 

–¢–≤–æ–∏ —Å–∫–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Å–æ–±—ã–º –¥–µ—Ç—Å–∫–∏–º —é–º–æ—Ä–æ–º, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏ –∏ –∂–∏–≤—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏. –¢—ã –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω–∏–º–∞–µ—à—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –¥–µ—Ç–µ–π 5-8 –ª–µ—Ç –∏ –∑–Ω–∞–µ—à—å, –∫–∞–∫ —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏—Ö –≤–Ω–∏–º–∞–Ω–∏–µ. 

–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ —Ç–∞–Ω–¥–µ–º–µ —Å –≥—Ä—É–ø–ø–æ–π –¥–µ—Ç–µ–π 5-8 –ª–µ—Ç. –û–Ω–∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç —Ç–µ–±–µ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: –∫–∞–∫–∏–µ –º–æ–Ω—Å—Ç—Ä—ã —Å–º–µ—à–Ω—ã–µ, –∫–∞–∫–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ, –∫–∞–∫–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –∫–ª–∞—Å—Å–Ω—ã–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–æ–ø–ª–æ—Ç–∏—Ç—å —ç—Ç–∏ –∏–¥–µ–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–µ—Ç—Å–∫—É—é –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. 
 

–°–æ–∑–¥–∞–π —è—Ä–∫—É—é, –¥–∏–Ω–∞–º–∏—á–Ω—É—é, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∫–∞–∑–∫—É –¥–ª–∏–Ω–æ–π 3-5 —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞. 

üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
–ò–º—è –≥–µ—Ä–æ—è: {{child_name}}
–í–æ–∑—Ä–∞—Å—Ç: {{child_age}}
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞: {{theme_name}}
–ú–æ—Ä–∞–ª—å: {{plot_description}}

üöÄ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–∞–∑–∫–∏: 

    –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –Ω–∞—á–∞–ª–æ (–ø–µ—Ä–≤—ã–µ 2 –∞–±–∑–∞—Ü–∞):
    ‚Ä¢ –ú–æ—â–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä (–ø–æ—Ä—Ç–∞–ª, –≥–æ–≤–æ—Ä—è—â–µ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ –ø–∏—Å—å–º–æ)
    ‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –¥–µ–π—Å—Ç–≤–∏–µ
    ‚Ä¢ –ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≤–æ–ª—à–µ–±–Ω—ã–º –º–∏—Ä–æ–º
     

üåà –°–æ–∑–¥–∞–Ω–∏–µ –º–∏—Ä–∞:
‚Ä¢ –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –æ–∂–∏–≤–∞—é—Ç –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç
‚Ä¢ –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å
‚Ä¢ –ú–∏—Ä –ø–æ–ª–æ–Ω –∑–≤—É–∫–æ–≤, –∑–∞–ø–∞—Ö–æ–≤, –¥–≤–∏–∂–µ–Ω–∏–π –∏ —Å—é—Ä–ø—Ä–∏–∑–æ–≤
‚Ä¢ –í–∫–ª—é—á–∞–π –∫–æ–º–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∞–±—Å—É—Ä–¥–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ 

‚öîÔ∏è –°—é–∂–µ—Ç–Ω–∞—è –ª–∏–Ω–∏—è:
‚Ä¢ 2-3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è
‚Ä¢ –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ –∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
‚Ä¢ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã —Å–æ–±—ã—Ç–∏–π
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –≥–µ—Ä–æ—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ —É—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∏—Ö 

üßô‚Äç‚ôÇÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂–∏:
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—ã
‚Ä¢ –ß—ë—Ç–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
‚Ä¢ –ö–æ–º–∏—á–µ—Å–∫–∏–µ —á–µ—Ä—Ç—ã –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å —é–º–æ—Ä–æ–º 

üß† –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —á–∏—Ç–∞—Ç–µ–ª–µ–º:
‚Ä¢ –ü—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —á–∏—Ç–∞—Ç–µ–ª—é
‚Ä¢ –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç—ã "—É–º–Ω–æ–≥–æ —é–º–æ—Ä–∞" 

‚ú® –§–∏–Ω–∞–ª:
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≥–µ—Ä–æ—è —Å –≤–∞–∂–Ω—ã–º –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º
‚Ä¢ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã–π —Ñ–∏–Ω–∞–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π 

üé≠ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–∏–ª—è:
‚Ä¢ –ñ–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å
‚Ä¢ –ê–±—Å—É—Ä–¥–Ω—ã–π —é–º–æ—Ä
‚Ä¢ –î–µ—Ç—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π 

üìö –§–æ—Ä–º–∞—Ç:
‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –≥–ª–∞–≤—ã
‚Ä¢ –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ 

–í–∞–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ë–µ–∑ –º–æ—Ä–∞–ª–∏–∑–∞—Ç–æ—Ä—Å—Ç–≤–∞
‚Ä¢ –ë–µ–∑ –Ω–∞–∑–∏–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ë–µ–∑ —Å—Ç—Ä–∞—à–Ω—ã—Ö –∏–ª–∏ —Ç—Ä–∞–≤–º–∞—Ç–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
‚Ä¢ –ë–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
‚Ä¢ –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏ 

–°–æ–∑–¥–∞–≤–∞–π —Å–∫–∞–∑–∫—É —Ç–∞–∫, –±—É–¥—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –µ—ë –≤–µ—á–µ—Ä–æ–º –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, —Å –∂–∏–≤—ã–º–∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è–º–∏ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–º —É–≤–ª–µ—á–µ–Ω–∏–µ–º. –ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–∏—Ç –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —É–ª—ã–±–∫—É.
‚ö†Ô∏è –í–ê–ñ–ù–û:   

    –ù–∞—á–∏–Ω–∞–π —Å–∫–∞–∑–∫—É —Å—Ä–∞–∑—É —Å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑.  
    –ü–∏—à–∏ –¥–∏–Ω–∞–º–∏—á–Ω—É—é, —Å–º–µ—à–Ω—É—é, –≤–æ–ª—à–µ–±–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å –∞–±—Å—É—Ä–¥–Ω–æ-—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º –º–∏—Ä–æ–º, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º–∏—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–º —Ñ–∏–Ω–∞–ª–æ–º.  
    –°—Ç—Ä–æ–≥–æ –∏–∑–±–µ–≥–∞–π –ª—é–±—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞—Å–∏–ª–∏—è, —Å—Ç—Ä–∞—Ö–∞, –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏, —Å–µ–∫—Å—É–∞–ª—å–Ω—ã—Ö –Ω–∞–º—ë–∫–æ–≤ –∏–ª–∏ —Ç–µ–º, –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –¥–µ—Ç–µ–π 5‚Äì8 –ª–µ—Ç.  
    –î–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º, —Ä–∞–∑–¥–µ–ª—è—è –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –≥–ª–∞–≤—ã —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞.  
    –í–∫–ª—é—á–∏ –º–æ—Ä–∞–ª—å "{{moral}}" –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —á–µ—Ä–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â—É—é —Ñ—Ä–∞–∑—É –≥–µ—Ä–æ—è –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ.  
    –í –æ—Ç–≤–µ—Ç–µ ‚Äî —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤–∞—è —Å–∫–∞–∑–∫–∞ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—Ç–æ–∫ –∏–ª–∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.  
    –£–±–µ–¥–∏—Å—å –≤ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ—Å—Ç–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ –¥–µ—Ç—Å–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–∞.
     

–ü—Ä–∏–º–µ—Ä –Ω–∞—á–∞–ª–∞:
–í –º–∏—Ä–µ, –≥–¥–µ —Ä–µ–∫–∏ —Ç–µ–∫–ª–∏ –∏–∑ –≤–∞—Ä–µ–Ω—å—è, –∞ –≥–æ—Ä—ã —Å–º–µ—è–ª–∏—Å—å, –∫–æ–≥–¥–∞ –∏—Ö —â–µ–∫–æ—Ç–∞–ª–∏ –æ–±–ª–∞–∫–∞, {{child_name}} –æ–±–Ω–∞—Ä—É–∂–∏–ª –¥–≤–µ—Ä—å –≤ —Å—Ç–≤–æ–ª–µ –±–∞–æ–±–∞–±–∞. –ó–∞ –Ω–µ–π –ø—Ä—ã–≥–∞–ª –∫—Ä–æ–ª–∏–∫ –≤ –æ—á–∫–∞—Ö, –¥–µ—Ä–∂–∞—â–∏–π –≤ –ª–∞–ø–∞—Ö –∫–∞—Ä—Ç—É, –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—É—é —Å–≤–µ—Ç–ª—è—á–∫–∞–º–∏. """


    default_critic_prompt = f"""–¢—ã ‚Äî —Ä–µ–±—ë–Ω–æ–∫ 5‚Äì8 –ª–µ—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∏—Å–∞–ª–∞—Å—å —ç—Ç–∞ —Å–∫–∞–∑–∫–∞. –¢—ã –ª—é–±–∏—à—å —è—Ä–∫–∏–µ, –≤–µ—Å—ë–ª—ã–µ –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ–ª–Ω—ã–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞, —é–º–æ—Ä–∞ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤. –í–æ—Ç —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏:

{{first_story}}

–ü—Ä–æ—á–∏—Ç–∞–π –µ—ë –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π –∫—Ä–∏—Ç–∏–∫-—Ä–µ–±—ë–Ω–æ–∫. –ü–æ–¥—É–º–∞–π, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –µ—ë –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ, –∂–∏–≤–µ–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ.

‚ú® –ó–∞–¥–∞—á–∏:
1. –ù–∞–π–¥–∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞:  
   - –ì–¥–µ —Å—Ç–∞–ª–æ —Å–∫—É—á–Ω–æ?  
   - –ö–∞–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏?  
   - –ï—Å—Ç—å –ª–∏ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–º–µ—à–Ω–µ–µ, —è—Ä—á–µ –∏–ª–∏ –º–∞–≥–∏—á–Ω–µ–µ?  

2. –ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è:  
   - –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —á—Ç–æ–±—ã –º–∏—Ä —Å—Ç–∞–ª –µ—â—ë –≤–æ–ª—à–µ–±–Ω–µ–µ.  
   - –°–¥–µ–ª–∞–π –¥–∏–∞–ª–æ–≥–∏ –∂–∏–≤–µ–µ –∏ —Å–º–µ—à–Ω–µ–µ.  
   - –í–∫–ª—é—á–∏ –±–æ–ª—å—à–µ –º–∞–≥–∏–∏, –∏–≥—Ä–∏–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤.  
   - –£—Å–∏–ª—å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å—ã —á–∏—Ç–∞—Ç–µ–ª—é, –¥–æ–±–∞–≤—å –º–æ–º–µ–Ω—Ç—ã, –≥–¥–µ –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–µ–±—è –Ω–∞ –º–µ—Å—Ç–µ –≥–µ—Ä–æ—è.  

3. –ü–µ—Ä–µ–ø–∏—à–∏ —Å–∫–∞–∑–∫—É, —É—Å—Ç—Ä–∞–Ω–∏–≤ –≤—Å–µ –∑–∞–º–µ—á–∞–Ω–∏—è:  
   - –°–¥–µ–ª–∞–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–Ω–∞–º–∏—á–Ω–æ–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π.  
   - –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ —é–º–æ—Ä–∞, –∞–±—Å—É—Ä–¥–∞ –∏ –º–∞–≥–∏–∏.  
   - –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —É–ª—ã–±–∫—É –∏–ª–∏ —É–¥–∏–≤–ª–µ–Ω–∏–µ.  
   - –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –±—ã–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º–∏—Å—è.  

üéØ –í–∞–∂–Ω–æ:   

    –ù–∏–∫–∞–∫–∏—Ö —Å—Ç—Ä–∞—à–Ω—ã—Ö, –∂–µ—Å—Ç–æ–∫–∏—Ö –∏–ª–∏ –≤–∑—Ä–æ—Å–ª—ã—Ö —Ç–µ–º ‚Äî —Ç–æ–ª—å–∫–æ –¥–æ–±—Ä–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ —Å–∏—Ç—É–∞—Ü–∏–∏, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–ø–ª–æ –∏ –≤–µ—Å–µ–ª–æ.  
    –í—Å–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –≥–µ—Ä–æ—è —Ä–µ—à–∞—é—Ç—Å—è —Å–º–µ–∫–∞–ª–∫–æ–π, —é–º–æ—Ä–æ–º –∏–ª–∏ –ø–æ–º–æ—â—å—é –¥—Ä—É–∑–µ–π, –Ω–∏–∫–∞–∫–æ–≥–æ –Ω–∞—Å–∏–ª–∏—è, –¥–∞–∂–µ –≤ —à—É—Ç–∫—É.  
    –ï—Å–ª–∏ –≥–µ—Ä–æ–π –≤–æ–ª–Ω—É–µ—Ç—Å—è ‚Äî —ç—Ç–æ –∫–∞–∫ –ø–µ—Ä–µ–¥ –∫–∞—Ä—É—Å–µ–ª—è–º–∏, –∞ –Ω–µ –ø–µ—Ä–µ–¥ –º–æ–Ω—Å—Ç—Ä–∞–º–∏: ¬´–£ {{child_name}} –∫–æ–ª–µ–Ω–∫–∏ –¥—Ä–æ–∂–∞–ª–∏, –±—É–¥—Ç–æ –æ–Ω –ø—Ä–æ–≥–ª–æ—Ç–∏–ª –∂–∏–≤–æ–≥–æ –∫–æ–º–∞—Ä–∏–∫–∞!¬ª  
    –ü—Ä–æ–≤–µ—Ä—è–π –∫–∞–∂–¥—É—é —Ñ—Ä–∞–∑—É: ¬´–ú–æ–≥—É –ª–∏ —è —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —ç—Ç–æ –±–∞–±—É—à–∫–µ, –ø–æ–∫–∞ –æ–Ω–∞ —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç –º–µ–Ω—è —Å–ø–∞—Ç—å?¬ª –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —É–¥–∞–ª—è–π!  
    –¢–æ–ª—å–∫–æ –ø–æ–∑–∏—Ç–∏–≤: –¥–∞–∂–µ –∑–ª–æ–¥–µ–∏ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –º–∏–ª—ã–º–∏ —á—É–¥–∞–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä–∞–∫–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±–æ–∏—Ç—Å—è —â–µ–∫–æ—Ç–∫–∏ –æ–±–ª–∞–∫–∞–º–∏).  
    –ù—É–ª–µ–≤–æ–π –Ω–∞–º—ë–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî —Ç–æ–ª—å–∫–æ –∏–≥—Ä–∞, –º–∞–≥–∏—è –∏ —Å–º–µ—Ö. –î–∞–∂–µ –µ—Å–ª–∏ –≥–µ—Ä–æ–π —Ç–µ—Ä—è–µ—Ç —á—Ç–æ-—Ç–æ, –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç –≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ —Ä–∞–¥–æ—Å—Ç–∏ (¬´–ü–æ—Ç–µ—Ä—è–ª –∫–æ–Ω—Ñ–µ—Ç—É? –ó–∞—Ç–æ –Ω–∞—à—ë–ª —Ä–∞–¥—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä—ã–≥–∞–µ—Ç —á–µ—Ä–µ–∑ –ª—É–∂–∏!¬ª).

–ü—Ä–∏–º–µ—Ä –Ω–∞—á–∞–ª–∞:
–í –º–∏—Ä–µ, –≥–¥–µ —Ä–µ–∫–∏ —Ç–µ–∫–ª–∏ –∏–∑ –≤–∞—Ä–µ–Ω—å—è, –∞ –≥–æ—Ä—ã —Å–º–µ—è–ª–∏—Å—å, –∫–æ–≥–¥–∞ –∏—Ö —â–µ–∫–æ—Ç–∞–ª–∏ –æ–±–ª–∞–∫–∞, {{child_name}} –æ–±–Ω–∞—Ä—É–∂–∏–ª –¥–≤–µ—Ä—å –≤ —Å—Ç–≤–æ–ª–µ –±–∞–æ–±–∞–±–∞. –ó–∞ –Ω–µ–π –ø—Ä—ã–≥–∞–ª –∫—Ä–æ–ª–∏–∫ –≤ –æ—á–∫–∞—Ö, –¥–µ—Ä–∂–∞—â–∏–π –≤ –ª–∞–ø–∞—Ö –∫–∞—Ä—Ç—É, –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—É—é —Å–≤–µ—Ç–ª—è—á–∫–∞–º–∏. """


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO prompts (role, content) VALUES (?, ?)", 
              ('author', default_author_prompt))
    c.execute("INSERT OR REPLACE INTO prompts (role, content) VALUES (?, ?)", 
              ('critic', default_critic_prompt))
    conn.commit()
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏", callback_data="admin_prompts")],
        [InlineKeyboardButton("üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚úÖ –ü—Ä–æ–º–ø—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º!\n\n"
        "–í—Å–µ –Ω–æ–≤—ã–µ —Å–∫–∞–∑–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.",
        reply_markup=reply_markup
    )
    
    logger.info(f"Prompts reset to default by admin {query.from_user.id}")

async def generate_story_with_custom_prompts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    theme_id = context.user_data.get('selected_theme')
    plot_id = context.user_data.get('selected_plot')
    plot_description = context.user_data.get('plot_description')
    child_name = context.user_data.get('child_name')
    child_age = context.user_data.get('child_age')
    moral = context.user_data.get('selected_moral')

    if theme_id == "custom":
        theme_name = context.user_data.get('custom_theme', '–°–≤–æ—è —Ç–µ–º–∞')
        plot_description = context.user_data.get('plot_description', '–°–≤–æ—è —Ü–µ–ª—å')
    else:
        theme_name = ID_TO_THEME.get(theme_id, "")
    
    if not all([theme_id, plot_id, child_name, child_age, moral]):
        try:
            await query.edit_message_text("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–∑–∫–∏")
        except:
            pass
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try:
        await query.edit_message_text("‚ú® –°–æ–∑–¥–∞—é –≤–∞—à—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–∫–∞–∑–∫—É...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    except:
        pass
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("SELECT role, content FROM prompts WHERE role IN ('author', 'critic')")
        prompts = dict(c.fetchall())
        conn.close()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        client = OpenAI(
            api_key=OPENAI_API_KEY,
            timeout=120.0  # –¢–∞–π–º–∞—É—Ç 2 –º–∏–Ω—É—Ç—ã
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        theme_name = ID_TO_THEME.get(theme_id, "")
        
        # –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∞–≤—Ç–æ—Ä–∞
        author_prompt_template = prompts.get('author', '–°–æ–∑–¥–∞–π –¥–µ—Ç—Å–∫—É—é —Å–∫–∞–∑–∫—É.')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫ –ø—Ä–æ–º–ø—Ç—É –∞–≤—Ç–æ—Ä–∞
        full_author_prompt = f"""{author_prompt_template}

üîπ –î–∞–Ω–Ω—ã–µ:
–ò–º—è: {child_name}. –í–æ–∑—Ä–∞—Å—Ç: {child_age}. –¢–µ–º–∞: {theme_name}. –¶–µ–ª—å: {plot_description}.
–ú–æ—Ä–∞–ª—å: {moral}

–°–æ–∑–¥–∞–π —Å–∫–∞–∑–∫—É —Å —É—á–µ—Ç–æ–º —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –º–æ—Ä–∞–ª—å "{moral}" –≤ –∫–æ–Ω—Ü–µ —Å–∫–∞–∑–∫–∏."""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try:
            await query.edit_message_text("‚ú® –°–æ–∑–¥–∞—é —á–µ—Ä–Ω–æ–≤–∏–∫ —Å–∫–∞–∑–∫–∏...\n\nüìù –≠—Ç–∞–ø 1/2: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫–∞–∑–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
        except:
            pass
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é —Å–∫–∞–∑–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            response1 = await asyncio.wait_for(
                asyncio.to_thread(
                    client.chat.completions.create,
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∫–∞–∑–æ—á–Ω–∏–∫ —Å –æ–≥—Ä–æ–º–Ω—ã–º –æ–ø—ã—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è –¥–µ—Ç–µ–π. ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–∞—á–∏–Ω–∞–π —Å–∫–∞–∑–∫—É —Å—Ä–∞–∑—É —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ –û, —ç—Ç–∞ —Å–∫–∞–∑–∫–∞ –æ—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω–∞—è..., –†–∞–∑, –¥–≤–∞, —Ç—Ä–∏ - —Å–∫–∞–∑–∫–∞!, –ñ–∏–ª-–±—ã–ª... (–µ—Å–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Å—Ç–∏–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∫–∞–∑–∫–∏)."},
                        {"role": "user", "content": full_author_prompt}
                    ],
                    max_tokens=2000,
                    temperature=0.9
                ),
                timeout=90.0  # –¢–∞–π–º–∞—É—Ç 90 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            )
        except asyncio.TimeoutError:
            raise Exception("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ —Å–∫–∞–∑–∫–∏")
        
        first_story = response1.choices[0].message.content
        
        # –≠–¢–ê–ü 2: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∫—Ä–∏—Ç–∏–∫–∞
        critic_prompt_template = prompts.get('critic', '–£–ª—É—á—à–∏ —ç—Ç—É —Å–∫–∞–∑–∫—É.')
        
        full_critic_prompt = f"""{critic_prompt_template}

–í–æ—Ç —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏:
{first_story}"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try:
            await query.edit_message_text("‚ú® –£–ª—É—á—à–∞—é —Å–∫–∞–∑–∫—É...\n\nüé® –≠—Ç–∞–ø 2/2: –î–µ—Ç—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∞–≥–∏—é...")
        except:
            pass
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∫–∞–∑–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            response2 = await asyncio.wait_for(
                asyncio.to_thread(
                    client.chat.completions.create,
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã —Ä–µ–±—ë–Ω–æ–∫ 5-8 –ª–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å —Å–∫–∞–∑–∫–∏ –µ—â—ë –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–µ–π.–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å–∫–∞–∑–∫–∞ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø —Å—Ä–∞–∑—É —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è, –ë–ï–ó –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ –æ—Ç —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û, —ç—Ç–∞ —Å–∫–∞–∑–∫–∞ –æ—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω–∞—è...) "},
                        {"role": "user", "content": full_critic_prompt}
                    ],
                    max_tokens=2200,
                    temperature=0.7
                ),
                timeout=90.0  # –¢–∞–π–º–∞—É—Ç 90 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            )
        except asyncio.TimeoutError:
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é
            logger.warning("Timeout in second stage, using first story version")
            final_story = first_story
        else:
            final_story = response2.choices[0].message.content
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∫–∞–∑–∫–∏
        plot_name = PLOT_NAMES.get(theme_id, {}).get(plot_id, "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ")
        story_title = f"{plot_name} - —Å–∫–∞–∑–∫–∞ –¥–ª—è {child_name}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∞–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("INSERT INTO stories (user_id, title, content, created_at) VALUES (?, ?, ?, ?)",
                  (user_id, story_title, final_story, datetime.now().isoformat()))
        story_id = c.lastrowid
        conn.commit()
        conn.close()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫
        update_user_stories_count(user_id)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å –µ—â—ë —Å–∫–∞–∑–∫—É", callback_data="create_story")],
            [InlineKeyboardButton("üìñ –ú–æ–∏ —Å–∫–∞–∑–∫–∏", callback_data="my_stories")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å–∫–∞–∑–∫—É –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(final_story) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                await query.edit_message_text(f"‚ú® {story_title}\n\n{final_story[:4000]}...")
            except:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"‚ú® {story_title}\n\n{final_story[:4000]}..."
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
            remaining_content = final_story[4000:]
            while remaining_content:
                chunk = remaining_content[:4000]
                remaining_content = remaining_content[4000:]
                
                try:
                    if remaining_content:
                        await context.bot.send_message(chat_id=query.message.chat_id, text=chunk)
                    else:
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await context.bot.send_message(
                            chat_id=query.message.chat_id, 
                            text=chunk,
                            reply_markup=reply_markup
                        )
                except Exception as e:
                    logger.error(f"Error sending story chunk: {e}")
                    break
        else:
            try:
                await query.edit_message_text(
                    f"‚ú® {story_title}\n\n{final_story}",
                    reply_markup=reply_markup
                )
            except:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"‚ú® {story_title}\n\n{final_story}",
                    reply_markup=reply_markup
                )
        
        logger.info(f"Story generated with custom prompts for user {user_id}: {story_title}")
        
    except Exception as e:
        logger.error(f"Error generating story with custom prompts: {str(e)}")
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_story")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫–∞–∑–∫–∏."
        if "—Ç–∞–π–º–∞—É—Ç" in str(e).lower() or "timeout" in str(e).lower():
            error_message = "‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏ –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        try:
            await query.edit_message_text(error_message, reply_markup=reply_markup)
        except:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=error_message,
                reply_markup=reply_markup
            )


# ==================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====================
def filter_inappropriate_content(story_text):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–∫–∞–∑–∫–∞—Ö"""
    if not story_text:
        return story_text
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ—Ä–∞–∑ –∏ –∏—Ö –∑–∞–º–µ–Ω—ã
    inappropriate_phrases = {
        # –ì—Ä—É–±—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        r'\b–¥—É—Ä–∞–∫\b': '–≥–ª—É–ø—ã—à–∫–∞',
        r'\b–∏–¥–∏–æ—Ç\b': '–∑–∞–±—ã–≤–∞—à–∫–∞',
        r'\b—Ç—É–ø–æ–π\b': '—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π',
        r'\b–≥–ª—É–ø—ã–π\b': '–Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π',
        r'\b–¥–µ–±–∏–ª\b': '–∑–∞–±—ã–≤—á–∏–≤—ã–π',
        r'\b–∫—Ä–µ—Ç–∏–Ω\b': '—Ä–∞—Å—Ç–µ—Ä—è—à–∫–∞',
        r'\b—Ç—É–ø–∏—Ü–∞\b': '–º–µ—á—Ç–∞—Ç–µ–ª—å',
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        r'\b—É–±—å—é\b': '–æ—Å—Ç–∞–Ω–æ–≤–ª—é',
        r'\b—É–±–∏—Ç—å\b': '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
        r'\b–∑–∞–¥—É—à—É\b': '–ø–æ–π–º–∞—é',
        r'\b–∑–∞–¥—É—à–∏—Ç—å\b': '–ø–æ–π–º–∞—Ç—å',
        r'\b–ø–æ–±—å—é\b': '–¥–æ–≥–æ–Ω—é',
        r'\b–ø–æ–±–∏—Ç—å\b': '–¥–æ–≥–Ω–∞—Ç—å',
        r'\b—Ä–∞–∑–æ–±—å—é\b': '–æ—Å—Ç–∞–Ω–æ–≤–ª—é',
        r'\b—Ä–∞–∑–±–∏—Ç—å\b': '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
        
        # –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –¥–µ—Ç–µ–π —Ç–µ–º—ã
        r'\b–ø—å—è–Ω—ã–π\b': '—Å–æ–Ω–Ω—ã–π',
        r'\b–ø—å—è–Ω–∞—è\b': '—Å–æ–Ω–Ω–∞—è',
        r'\b–≤—ã–ø–∏–ª\b': '–ø–æ–ø–∏–ª –≤–æ–¥—ã',
        r'\b–≤—ã–ø–∏–ª–∞\b': '–ø–æ–ø–∏–ª–∞ –≤–æ–¥—ã',
        r'\b–∫—É—Ä–∏—Ç\b': '–¥—ã—à–∏—Ç',
        r'\b–∫—É—Ä–∏—Ç—å\b': '–¥—ã—à–∞—Ç—å',
        
        # –°—Ç—Ä–∞—à–Ω—ã–µ –∏–ª–∏ –ø—É–≥–∞—é—â–∏–µ —Ñ—Ä–∞–∑—ã
        r'\b—É–∂–∞—Å–Ω–æ\b': '–æ—á–µ–Ω—å',
        r'\b—Å—Ç—Ä–∞—à–Ω–æ\b': '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ',
        r'\b–∫–æ—à–º–∞—Ä\b': '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
        r'\b–∫—Ä–æ–≤—å\b': '–∫—Ä–∞—Å–Ω–∞—è –∫—Ä–∞—Å–∫–∞',
        r'\b–∫—Ä–æ–≤–∞–≤—ã–π\b': '–∫—Ä–∞—Å–Ω—ã–π',
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        r'\b–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã–π\b': '–Ω–µ–æ–±—ã—á–Ω—ã–π',
        r'\b–≥–∞–¥–∫–∏–π\b': '—Å—Ç—Ä–∞–Ω–Ω—ã–π',
        r'\b–º–µ—Ä–∑–∫–∏–π\b': '–Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π',
        r'\b–ø—Ä–æ—Ç–∏–≤–Ω—ã–π\b': '–∫–∞–ø—Ä–∏–∑–Ω—ã–π',
        
        # –§—Ä–∞–∑—ã –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
        r'–∑–∞—Å–º—É—â–∞–ª–∞': '—É–¥–∏–≤–∏–ª–∞',
        r'–≥—Ä—É–±–æ–≤–∞—Ç–∞': '–Ω–µ–æ–±—ã—á–Ω–∞',
        r'—Ö–∏—Ç—Ä—é—â–∏–µ': '–æ–∑–æ—Ä–Ω—ã–µ',
        r'–ø–æ—à–∞–ª–∏—Ç—å': '–ø–æ–∏–≥—Ä–∞—Ç—å',
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    filtered_text = story_text
    for pattern, replacement in inappropriate_phrases.items():
        filtered_text = re.sub(pattern, replacement, filtered_text, flags=re.IGNORECASE)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–∏–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    # –£–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –≤–∑—Ä–æ—Å–ª—ã–µ —Ç–µ–º—ã
    adult_patterns = [
        r'\b(–∞–ª–∫–æ–≥–æ–ª—å|–Ω–∞—Ä–∫–æ—Ç–∏–∫|—Å–∏–≥–∞—Ä–µ—Ç|—Ç–∞–±–∞–∫)\w*\b',
        r'\b(—Å–º–µ—Ä—Ç—å|—É–º–µ—Ä|—É–º–∏—Ä–∞—Ç—å|–ø–æ–≥–∏–±)\w*\b',
        r'\b(—Ä–∞–∑–≤–æ–¥|—Ä–∞—Å—Å—Ç–∞–ª–∏—Å—å|–±—Ä–æ—Å–∏–ª|–±—Ä–æ—Å–∏–ª–∞)\w*\b',
    ]
    
    for pattern in adult_patterns:
        filtered_text = re.sub(pattern, '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ', filtered_text, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –∏–∑–ª–∏—à–Ω–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ü–æ–≤–∫–∏
    negative_endings = [
        r'–ò –±–æ–ª—å—à–µ –æ–Ω–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å\.?',
        r'–ò –æ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –∏—Å—á–µ–∑\.?',
        r'–ò –Ω–∏–∫—Ç–æ –µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–µ–ª\.?',
        r'–ö–æ–Ω–µ—Ü —ç—Ç–æ–π –≥—Ä—É—Å—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏\.?',
    ]
    
    for pattern in negative_endings:
        filtered_text = re.sub(pattern, '–ò –æ–Ω–∏ –∂–∏–ª–∏ –¥–æ–ª–≥–æ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ!', filtered_text, flags=re.IGNORECASE)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not any(word in filtered_text.lower() for word in ['—Å—á–∞—Å—Ç–ª–∏–≤', '—Ä–∞–¥–æ—Å—Ç', '–≤–µ—Å–µ–ª', '—Å–º–µ—Ö', '—É–ª—ã–±–∫']):
        # –ï—Å–ª–∏ –≤ —Å–∫–∞–∑–∫–µ –Ω–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–Ω–µ—Ü
        if filtered_text.strip() and not filtered_text.strip().endswith('.'):
            filtered_text += '.'
        filtered_text += ' –ò –≤—Å–µ –±—ã–ª–∏ –æ—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤—ã!'
    
    return filtered_text

def add_child_friendly_ending(story_text, moral):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç—Å–∫—É—é –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –∫–æ–Ω—Ü–æ–≤–∫—É –∫ —Å–∫–∞–∑–∫–µ"""
    if not story_text:
        return story_text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ö–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞
    good_endings = ['—Å—á–∞—Å—Ç–ª–∏–≤–æ', '—Ä–∞–¥–æ—Å—Ç–Ω–æ', '–≤–µ—Å–µ–ª–æ', '–¥—Ä—É–∂–Ω–æ', '–º–∏—Ä–Ω–æ']
    has_good_ending = any(ending in story_text.lower()[-200:] for ending in good_endings)
    
    if not has_good_ending:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ü–æ–≤–∫—É
        if not story_text.strip().endswith('.'):
            story_text += '.'
        
        story_text += f'\n\n–ò –∑–∞–ø–æ–º–Ω–∏: {moral}! ‚ú®'
    
    return story_text

def get_user(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
    c.execute("PRAGMA table_info(users)")
    columns_info = c.fetchall()
    column_names = [col[1] for col in columns_info]
    
    c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user_data = c.fetchone()
    conn.close()
    
    if not user_data:
        return None
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
    user_dict = {}
    for i, column_name in enumerate(column_names):
        if i < len(user_data):
            user_dict[column_name] = user_data[i]
    
    return user_dict

def is_user_blocked(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    user = get_user(user_id)
    if not user:
        return False
    return user.get('is_blocked', 0) == 1

def is_user_tester(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–µ—Ä–æ–º"""
    user = get_user(user_id)
    if not user:
        return False
    return user.get('is_tester', 0) == 1

def can_generate_story(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫–∞–∑–∫–∏"""
    if is_user_blocked(user_id):
        return False, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    if not has_agreed_terms(user_id):
        return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏"

    user = get_user(user_id)
    if not user:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

    try:
        stories_used = int(user.get('stories_used', 0) or 0)
    except (ValueError, TypeError):
        stories_used = 0

    subscription = user.get('subscription')
    subscription_end = user.get('subscription_end')

    if subscription and subscription_end:
        try:
            end_date = datetime.fromisoformat(subscription_end)
            if datetime.now() < end_date:
                tariff = TARIFFS.get(subscription)
                if tariff and stories_used < tariff["stories"]:
                    return True, f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ({tariff['stories'] - stories_used} —Å–∫–∞–∑–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å)"
        except Exception as e:
            logger.warning(f"Error parsing subscription_end: {e}")

    if stories_used < FREE_LIMIT:
        return True, f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç ({FREE_LIMIT - stories_used} —Å–∫–∞–∑–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å)"

    return False, "–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ù—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞"
def update_user_stories_count(user_id):
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫"""
    if is_user_tester(user_id):
        return  # –¢–µ—Å—Ç–µ—Ä—ã –Ω–µ —Ç—Ä–∞—Ç—è—Ç –ª–∏–º–∏—Ç
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    c.execute("UPDATE users SET stories_used = COALESCE(stories_used, 0) + 1 WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()

def get_user_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    try:
        c.execute("SELECT COUNT(*) FROM users")
        total_users = c.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü subscription_end
        c.execute("PRAGMA table_info(users)")
        columns = [row[1] for row in c.fetchall()]
        
        if 'subscription_end' in columns:
            c.execute("SELECT COUNT(*) FROM users WHERE subscription IS NOT NULL AND subscription_end > datetime('now')")
            active_subscribers = c.fetchone()[0]
        else:
            active_subscribers = 0
        
        if 'is_blocked' in columns:
            c.execute("SELECT COUNT(*) FROM users WHERE is_blocked = 1")
            blocked_users = c.fetchone()[0]
        else:
            blocked_users = 0
        
        if 'is_tester' in columns:
            c.execute("SELECT COUNT(*) FROM users WHERE is_tester = 1")
            testers = c.fetchone()[0]
        else:
            testers = 0
        
        c.execute("SELECT COUNT(*) FROM stories")
        total_stories = c.fetchone()[0]
        
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        total_users = 0
        active_subscribers = 0
        blocked_users = 0
        testers = 0
        total_stories = 0
    
    finally:
        conn.close()
    
    return {
        'total_users': total_users,
        'active_subscribers': active_subscribers,
        'blocked_users': blocked_users,
        'testers': testers,
        'total_stories': total_stories
    }
# ==================== –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_user_blocked(user_id):
        error_message = "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        if update.callback_query:
            await update.callback_query.edit_message_text(error_message)
        else:
            await update.message.reply_text(error_message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(user_id)
    is_new = False
    if not user:
        is_new = True
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (id, name) VALUES (?, ?)", (user_id, user_name))
        conn.commit()
        conn.close()

    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = f"""üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Å–∫–∞–∑–æ–∫!
–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∞–∑–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å! 
‚ú® –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∫–∞–∑–∫–∏ –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞
‚Ä¢ –í–∫–ª—é—á–∞—Ç—å –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –≤ —Å–∫–∞–∑–∫—É
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ—É—á–∏—Ç–µ–ª—å–Ω—É—é –º–æ—Ä–∞–ª—å
üéÅ –£ –≤–∞—Å –µ—Å—Ç—å {FREE_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å–∫–∞–∑–∫–∞!"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if not update.callback_query:
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

# –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
    if is_new and not update.callback_query:
        TERMS_MESSAGE = """üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
üîó [–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://docs.google.com/document/d/1bQ8GPviklu2Titj2AFNER6hwJnHgI7hjJqI47oQW6wE/edit?usp=sharing)
üîó [–û—Ñ–µ—Ä—Ç–∞](https://docs.google.com/document/d/1JqirUs2KLvr-aRXRpXMqGNDP9-tHYvvh-e_uUub6mkY/edit?usp=sharing)
üîó [–ü–æ–ª–æ–∂–µ–Ω–∏–µ](https://docs.google.com/document/d/13F-qfLelERefRIewWwE9r9-GejgRW0wuUDytRMI81p8/edit?usp=sharing)

‚úÖ –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."""
        keyboard = [[InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree_terms")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(TERMS_MESSAGE, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –∏–ª–∏ —ç—Ç–æ callback, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É", callback_data="create_story")],
        [InlineKeyboardButton("üìñ –ú–æ–∏ —Å–∫–∞–∑–∫–∏", callback_data="my_stories")],
        [InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ callback query –∏–ª–∏ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """üÜò –ü–æ–º–æ—â—å

üåü –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üìö –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—é–∂–µ—Ç
4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç
5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–∫–∞–∑–∫—É!

üíé –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞—ë—Ç:
‚Ä¢ –ë–æ–ª—å—à–µ —Å–∫–∞–∑–æ–∫ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
‚Ä¢ –ù–æ–≤—ã–µ —Ç–µ–º—ã –∏ —Å—é–∂–µ—Ç—ã

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_username"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(help_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(help_text, reply_markup=reply_markup)

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_id = update.effective_user.id
    waiting_for = context.user_data.get('waiting_for')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_user_blocked(user_id):
        await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    if context.user_data.get('prompt_step') == 'waiting_prompt':
        if await handle_prompt_input(update, context):
            return  # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≤—ã—Ö–æ–¥–∏–º

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã
    if waiting_for == 'custom_theme':
        custom_theme = update.message.text.strip()
        
        if len(custom_theme) < 3:
            await update.message.reply_text("‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
            return
        
        if len(custom_theme) > 100:
            await update.message.reply_text("‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z0-9\s\-.,!?]+$', custom_theme):
            await update.message.reply_text("‚ùå –¢–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è:")
            return
        
        context.user_data['custom_theme'] = custom_theme
        context.user_data['waiting_for'] = 'custom_plot'
        
        await update.message.reply_text(
            f"‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–º–∞: ¬´{custom_theme}¬ª\n\n"
            "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∏–ª–∏ —Å—é–∂–µ—Ç —Å–∫–∞–∑–∫–∏:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ '–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç –≤–æ–ª—à–µ–±–Ω—ã–π –∫–∞–º–µ–Ω—å'\n"
            "‚Ä¢ '–°–ø–∞—Å—Ç–∏ –ø—Ä–∏–Ω—Ü–µ—Å—Å—É –æ—Ç –∑–ª–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞'\n"
            "‚Ä¢ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º –¥–ª—è –ª–µ—Å–Ω—ã—Ö –∑–≤–µ—Ä–µ–π'\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é:"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—é–∂–µ—Ç–∞
    elif waiting_for == 'custom_plot':
        custom_plot = update.message.text.strip()
        
        if len(custom_plot) < 5:
            await update.message.reply_text("‚ùå –°—é–∂–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
            return
        
        if len(custom_plot) > 200:
            await update.message.reply_text("‚ùå –°—é–∂–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z0-9\s\-.,!?()]+$', custom_plot):
            await update.message.reply_text("‚ùå –°—é–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è:")
            return
        
        context.user_data['plot_description'] = custom_plot
        context.user_data['selected_plot'] = 'custom'
        context.user_data['waiting_for'] = 'name'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="confirm_custom_plot")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—é–∂–µ—Ç", callback_data="edit_custom_plot")],
            [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É —Ç–µ–º—ã", callback_data="create_story")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üìñ –í–∞—à–∞ —Å–∫–∞–∑–∫–∞:\n\n"
            f"üé≠ –¢–µ–º–∞: {context.user_data.get('custom_theme', '–°–≤–æ—è —Ç–µ–º–∞')}\n"
            f"üéØ –°—é–∂–µ—Ç: {custom_plot}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏?",
            reply_markup=reply_markup
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞
    elif waiting_for == 'name':
        child_name = update.message.text.strip()

        if len(child_name) < 1:
            await update.message.reply_text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return

        if len(child_name) > 50:
            await update.message.reply_text("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ:")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s\-]+$', child_name):
            await update.message.reply_text("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return

        context.user_data['child_name'] = child_name
        context.user_data['waiting_for'] = 'age'
        
        await update.message.reply_text(
            f"üë∂ –û—Ç–ª–∏—á–Ω–æ! –ì–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∑–æ–≤—É—Ç {child_name}.\n\n"
            "–°–∫–æ–ª—å–∫–æ –µ–º—É/–µ–π –ª–µ—Ç? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 80)"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    elif waiting_for == 'age':
        age_text = update.message.text.strip()
        
        if not age_text.isdigit():
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
            return
        
        age = int(age_text)
        if age < 0 or age > 80:
            await update.message.reply_text("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 80 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        
        context.user_data['child_age'] = age
        context.user_data['waiting_for'] = None
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ—Ä–∞–ª–∏
        await show_moral_selection(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ—Ä–∞–ª–∏
    elif waiting_for == 'custom_moral':
        custom_moral = update.message.text.strip()
        
        if len(custom_moral) < 5:
            await update.message.reply_text("‚ùå –ú–æ—Ä–∞–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤:")
            return
        
        if len(custom_moral) > 200:
            await update.message.reply_text("‚ùå –ú–æ—Ä–∞–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z0-9\s\-.,!?()¬´¬ª"]+$', custom_moral):
            await update.message.reply_text("‚ùå –ú–æ—Ä–∞–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ—Ä–∞–ª—å
        context.user_data['selected_moral'] = custom_moral
        context.user_data['waiting_for'] = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫–∞–∑–∫—É", callback_data="confirm_custom_moral")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–æ—Ä–∞–ª—å", callback_data="moral_custom")],
            [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –º–æ—Ä–∞–ª–∏", callback_data="back_to_moral")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üí≠ –í–∞—à–∞ –º–æ—Ä–∞–ª—å –¥–ª—è —Å–∫–∞–∑–∫–∏:\n\n"
            f"¬´{custom_moral}¬ª\n\n"
            f"–°–æ–∑–¥–∞—ë–º —Å–∫–∞–∑–∫—É —Å —ç—Ç–æ–π –º–æ—Ä–∞–ª—å—é?",
            reply_markup=reply_markup
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    elif context.user_data.get('price_step') == 'waiting_price':
        await handle_price_input(update, context)
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É—Å–ª–æ–≤–∏—è–º–∏
        if not has_agreed_terms(user_id):
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ /start"
            )
            return
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await start(update, context)

async def handle_custom_plot_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—é–∂–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_custom_plot":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
        context.user_data['waiting_for'] = 'name'
        
        await query.edit_message_text(
            "üë∂ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ä–µ–±—ë–Ω–∫–µ\n\n"
            "–ö–∞–∫ –∑–æ–≤—É—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è —Å–∫–∞–∑–∫–∏?\n"
            "(–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –≤ —á–∞—Ç)"
        )
        
    elif query.data == "edit_custom_plot":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Å—é–∂–µ—Ç–∞
        context.user_data['waiting_for'] = 'custom_plot'
        
        await query.edit_message_text(
            "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∏–ª–∏ —Å—é–∂–µ—Ç —Å–∫–∞–∑–∫–∏:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ '–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç –≤–æ–ª—à–µ–±–Ω—ã–π –∫–∞–º–µ–Ω—å'\n"
            "‚Ä¢ '–°–ø–∞—Å—Ç–∏ –ø—Ä–∏–Ω—Ü–µ—Å—Å—É –æ—Ç –∑–ª–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞'\n"
            "‚Ä¢ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º –¥–ª—è –ª–µ—Å–Ω—ã—Ö –∑–≤–µ—Ä–µ–π'\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é:"
        )



async def handle_agree_terms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("UPDATE users SET agreed_terms = 1 WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É", callback_data="create_story")],
        [InlineKeyboardButton("üìñ –ú–æ–∏ —Å–∫–∞–∑–∫–∏", callback_data="my_stories")],
        [InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """üÜò –ü–æ–º–æ—â—å

üåü –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üìö –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—é–∂–µ—Ç
4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç
5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–∫–∞–∑–∫—É!

üíé –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞—ë—Ç:
‚Ä¢ –ë–æ–ª—å—à–µ —Å–∫–∞–∑–æ–∫ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
‚Ä¢ –ù–æ–≤—ã–µ —Ç–µ–º—ã –∏ —Å—é–∂–µ—Ç—ã

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_username"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(help_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(help_text, reply_markup=reply_markup)

# ==================== –ü–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –ÆKassa ====================
async def show_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user = get_user(user_id)
    
    if not user:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        stories_used = int(user.get('stories_used', 0) or 0)
    except (ValueError, TypeError):
        stories_used = 0
    
    subscription = user.get('subscription')
    subscription_end = user.get('subscription_end')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    is_active = False
    end_date = None
    if subscription and subscription_end:
        try:
            end_date = datetime.fromisoformat(subscription_end)
            is_active = datetime.now() < end_date
        except Exception as e:
            logger.warning(f"Error parsing subscription_end: {e}")
            is_active = False
    
    if is_active and subscription in TARIFFS:
        tariff = TARIFFS[subscription]
        try:
            remaining_stories = int(tariff.get("stories", 0)) - stories_used
        except (ValueError, TypeError):
            remaining_stories = 0
        
        text = f"""üíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞

‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞
üìÖ –¢–∞—Ä–∏—Ñ: {subscription.title()}
‚è∞ –î–æ: {end_date.strftime('%d.%m.%Y %H:%M')}
üìö –°–∫–∞–∑–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_stories}
üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stories_used}"""
        
        keyboard = [
            [InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É", callback_data="create_story")],
            [InlineKeyboardButton("üíé –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
    else:
        remaining_free = max(0, FREE_LIMIT - stories_used)
        text = f"""üíé –ü–æ–¥–ø–∏—Å–∫–∞

‚ùå –°—Ç–∞—Ç—É—Å: –ù–µ –∞–∫—Ç–∏–≤–Ω–∞
üìö –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–∫–∞–∑–æ–∫: {remaining_free} –∏–∑ {FREE_LIMIT}

üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:
‚Ä¢ –ë–æ–ª—å—à–µ —Å–∫–∞–∑–æ–∫ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –ù–æ–≤—ã–µ —Ç–µ–º—ã –∏ —Å—é–∂–µ—Ç—ã
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–π"""
        
        keyboard = [
            [InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)


async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º payment_id
    try:
        payment_id = query.data.split("_")[2]
    except IndexError:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
    payment_info = check_payment_status(payment_id)
    
    if payment_info:
        status = payment_info.get("status")
        
        if status == "succeeded":
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            metadata = payment_info.get("metadata", {})
            try:
                user_id = int(metadata.get("user_id", query.from_user.id))
            except (ValueError, TypeError):
                user_id = query.from_user.id
                
            tariff = metadata.get("tariff")
            
            if tariff and tariff in TARIFFS:
                activate_subscription(user_id, tariff)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ
                update_payment_status(payment_id, "succeeded")
                
                tariff_info = TARIFFS[tariff]
                
                keyboard = [
                    [InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É", callback_data="create_story")],
                    [InlineKeyboardButton("üíé –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                    f"üìÖ –¢–∞—Ä–∏—Ñ: {tariff.title()}\n"
                    f"üìö –î–æ—Å—Ç—É–ø–Ω–æ —Å–∫–∞–∑–æ–∫: {tariff_info['stories']}\n"
                    f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: {tariff_info['duration_days']} –¥–Ω–µ–π\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫–∞–∑–∫–∏.",
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞")
                
        elif status == "pending":
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                reply_markup=reply_markup
            )
            
        elif status == "canceled":
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="buy_subscription")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞.",
                reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚ùì –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")


async def show_tariffs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    text = """üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:

–í—Å–µ —Ç–∞—Ä–∏—Ñ—ã –≤–∫–ª—é—á–∞—é—Ç:
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∞–∑–∫–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ç–µ–º–∞–º
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É

üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa (–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã)"""
    
    keyboard = []
    for tariff_key, tariff_info in TARIFFS.items():
        price = tariff_info["price"]
        stories = tariff_info["stories"]
        days = tariff_info["duration_days"]
        
        if tariff_key == "week":
            tariff_name = f"üìÖ –ù–µ–¥–µ–ª—è - {price}‚ÇΩ"
            description = f"{stories} —Å–∫–∞–∑–æ–∫ –Ω–∞ {days} –¥–Ω–µ–π"
        elif tariff_key == "month":
            tariff_name = f"üìÖ –ú–µ—Å—è—Ü - {price}‚ÇΩ"
            description = f"{stories} —Å–∫–∞–∑–æ–∫ –Ω–∞ {days} –¥–Ω–µ–π"
        else:  # year
            tariff_name = f"üìÖ –ì–æ–¥ - {price}‚ÇΩ"
            description = f"{stories} —Å–∫–∞–∑–æ–∫ –Ω–∞ {days} –¥–Ω–µ–π"
        
        keyboard.append([InlineKeyboardButton(
            f"{tariff_name} - {description}", 
            callback_data=f"pay_{tariff_key}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa"""
    query = update.callback_query
    await query.answer()
    
    tariff = query.data.split("_")[1]
    
    if tariff not in TARIFFS:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    
    tariff_info = TARIFFS[tariff]
    price = tariff_info["price"]
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
    description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∫–∞–∑–∫–∏ - {tariff} ({tariff_info['stories']} —Å–∫–∞–∑–æ–∫ –Ω–∞ {tariff_info['duration_days']} –¥–Ω–µ–π)"
    
    payment_info = create_yukassa_payment(price, description, user_id, tariff)
    
    if payment_info and payment_info.get("confirmation"):
        payment_url = payment_info["confirmation"]["confirmation_url"]
        payment_id = payment_info["id"]
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="buy_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üí≥ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff.title()}\n"
            f"üí∞ –°—É–º–º–∞: {price}‚ÇΩ\n"
            f"üìö –°–∫–∞–∑–æ–∫: {tariff_info['stories']}\n"
            f"‚è∞ –ü–µ—Ä–∏–æ–¥: {tariff_info['duration_days']} –¥–Ω–µ–π\n\n"
            f"üîó –ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
            reply_markup=reply_markup
        )
    else:
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"pay_{tariff}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="buy_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup
        )

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    payment_id = query.data.split("_")[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
    payment_info = check_payment_status(payment_id)
    
    if payment_info:
        status = payment_info.get("status")
        
        if status == "succeeded":
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            metadata = payment_info.get("metadata", {})
            user_id = int(metadata.get("user_id", query.from_user.id))
            tariff = metadata.get("tariff")
            
            if tariff and tariff in TARIFFS:
                activate_subscription(user_id, tariff)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ
                update_payment_status(payment_id, "succeeded")
                
                tariff_info = TARIFFS[tariff]
                
                keyboard = [
                    [InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É", callback_data="create_story")],
                    [InlineKeyboardButton("üíé –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                    f"üìÖ –¢–∞—Ä–∏—Ñ: {tariff.title()}\n"
                    f"üìö –î–æ—Å—Ç—É–ø–Ω–æ —Å–∫–∞–∑–æ–∫: {tariff_info['stories']}\n"
                    f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: {tariff_info['duration_days']} –¥–Ω–µ–π\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫–∞–∑–∫–∏.",
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞")
                
        elif status == "pending":
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                reply_markup=reply_markup
            )
            
        elif status == "canceled":
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="buy_subscription")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞.",
                reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚ùì –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

# ==================== –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–æ–∫ ====================
async def create_story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫–∞–∑–∫–∏
    can_create, message = can_generate_story(user_id)
    if not can_create:
        keyboard = [[InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")],
                   [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ùå {message}\n\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–∫–∞–∑–æ–∫!",
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã
    await show_theme_selection(update, context)

async def show_theme_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–µ–º—ã"""
    query = update.callback_query
    
    keyboard = []
    for i in range(0, len(THEMES), 2):
        row = []
        for j in range(2):
            if i + j < len(THEMES):
                theme = THEMES[i + j]
                theme_id = THEME_IDS[theme]
                row.append(InlineKeyboardButton(theme, callback_data=f"theme_{theme_id}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏:

–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!"""
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def show_plot_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å—é–∂–µ—Ç–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É"""
    query = update.callback_query
    await query.answer()
    
    theme_id = query.data.split("_")[1]
    theme_name = ID_TO_THEME.get(theme_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞")
    context.user_data['selected_theme'] = theme_id

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞
    if theme_id == "custom":
        context.user_data['waiting_for'] = 'custom_theme'
        
        keyboard = [[InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É —Ç–µ–º—ã", callback_data="create_story")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ç–µ–º—É –¥–ª—è —Å–∫–∞–∑–∫–∏\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤'\n"
            "‚Ä¢ '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–∞–Ω–µ —Å–ª–∞–¥–æ—Å—Ç–µ–π'\n"
            "‚Ä¢ '–ü–æ–¥–≤–æ–¥–Ω–æ–µ —Ü–∞—Ä—Å—Ç–≤–æ —Ä—É—Å–∞–ª–æ–∫'\n"
            "‚Ä¢ '–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ –∑–≤—ë–∑–¥–∞–º'\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–º—É:",
            reply_markup=reply_markup
        )
        return

    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º
    plots = PLOT_TEMPLATES.get(theme_id, {})
    plot_names = PLOT_NAMES.get(theme_id, {})

    if not plots:
        await query.edit_message_text("‚ùå –°—é–∂–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã")
        return

    keyboard = []
    for plot_id, plot_name in plot_names.items():
        keyboard.append([InlineKeyboardButton(plot_name, callback_data=f"plot_{plot_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É —Ç–µ–º—ã", callback_data="create_story")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"""üìñ {theme_name}

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ:"""

    await query.edit_message_text(text, reply_markup=reply_markup)





async def show_plot_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—é–∂–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—é–∂–µ—Ç–∞
    plot_id = query.data.split("_")[1]
    theme_id = context.user_data.get('selected_theme')
    
    if not theme_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—é–∂–µ—Ç–∞
    plot_description = PLOT_TEMPLATES.get(theme_id, {}).get(plot_id)
    plot_name = PLOT_NAMES.get(theme_id, {}).get(plot_id)
    
    if not plot_description:
        await query.edit_message_text("‚ùå –°—é–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—é–∂–µ—Ç
    context.user_data['selected_plot'] = plot_id
    context.user_data['plot_description'] = plot_description
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –Ω–∞—á–∏–Ω–∞–π", callback_data="confirm_plot")],
        [InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ü–µ–ª—å", callback_data=f"theme_{theme_id}")],
        [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É —Ç–µ–º—ã", callback_data="create_story")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""üìñ {plot_name}

{plot_description}

–ù–∞—á–∏–Ω–∞–µ–º —ç—Ç—É —Å–∫–∞–∑–∫—É?"""
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def request_child_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±—ë–Ω–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    context.user_data['waiting_for'] = 'name'
    
    text = """üë∂ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ä–µ–±—ë–Ω–∫–µ

–ö–∞–∫ –∑–æ–≤—É—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è —Å–∫–∞–∑–∫–∏?
(–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –≤ —á–∞—Ç)"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="create_story")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def handle_age_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    age = int(query.data.split("_")[1])
    context.user_data['child_age'] = age
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ—Ä–∞–ª–∏
    await show_moral_selection(update, context)

async def show_moral_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–æ—Ä–∞–ª–∏"""
    keyboard = []
    for i, moral in enumerate(MORALS):
        keyboard.append([InlineKeyboardButton(moral, callback_data=f"moral_{i}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π –º–æ—Ä–∞–ª–∏
    keyboard.append([InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –º–æ—Ä–∞–ª—å", callback_data="moral_custom")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="create_story")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = """üí≠ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ—Ä–∞–ª—å —Å–∫–∞–∑–∫–∏:
–ö–∞–∫–æ–π —É—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ—á—å —Ä–µ–±—ë–Ω–æ–∫?"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ callback query –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞),
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(text, reply_markup=reply_markup)



async def handle_moral_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ—Ä–∞–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "moral_custom":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é –º–æ—Ä–∞–ª—å
        context.user_data['waiting_for'] = 'custom_moral'
        
        text = """‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –º–æ—Ä–∞–ª—å –¥–ª—è —Å–∫–∞–∑–∫–∏

–ö–∞–∫–æ–π —É—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ—á—å —Ä–µ–±—ë–Ω–æ–∫ –∏–∑ —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏?

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–í–∞–∂–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–∑—å—è–º –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É"
‚Ä¢ "–ù—É–∂–Ω–æ –≤–µ—Ä–∏—Ç—å –≤ —Å–≤–æ–∏ —Å–∏–ª—ã"
‚Ä¢ "–î–æ–±—Ä–æ—Ç–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∑–ª–æ"

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –º–æ—Ä–∞–ª—å –≤ —á–∞—Ç:"""
        
        keyboard = [[InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –º–æ—Ä–∞–ª–∏", callback_data="back_to_moral")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–π –º–æ—Ä–∞–ª–∏
    moral_index = int(query.data.split("_")[1])
    moral = MORALS[moral_index]
    context.user_data['selected_moral'] = moral
    
    # –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∫–∞–∑–∫–∏
    await generate_story_with_custom_prompts(update, context)



async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    user_id = update.effective_user.id
    waiting_for = context.user_data.get('waiting_for')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_user_blocked(user_id):
        await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    if context.user_data.get('prompt_step') == 'waiting_prompt':
        if await handle_prompt_input(update, context):
            return  # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≤—ã—Ö–æ–¥–∏–º

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã
    if waiting_for == 'custom_theme':
        custom_theme = update.message.text.strip()
        
        if len(custom_theme) < 3:
            await update.message.reply_text("‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
            return
        
        if len(custom_theme) > 100:
            await update.message.reply_text("‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z0-9\s\-.,!?]+$', custom_theme):
            await update.message.reply_text("‚ùå –¢–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è:")
            return
        
        context.user_data['custom_theme'] = custom_theme
        context.user_data['waiting_for'] = 'custom_plot'
        
        await update.message.reply_text(
            f"‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–º–∞: ¬´{custom_theme}¬ª\n\n"
            "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∏–ª–∏ —Å—é–∂–µ—Ç —Å–∫–∞–∑–∫–∏:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ '–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç –≤–æ–ª—à–µ–±–Ω—ã–π –∫–∞–º–µ–Ω—å'\n"
            "‚Ä¢ '–°–ø–∞—Å—Ç–∏ –ø—Ä–∏–Ω—Ü–µ—Å—Å—É –æ—Ç –∑–ª–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞'\n"
            "‚Ä¢ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º –¥–ª—è –ª–µ—Å–Ω—ã—Ö –∑–≤–µ—Ä–µ–π'\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é:"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—é–∂–µ—Ç–∞
    elif waiting_for == 'custom_plot':
        custom_plot = update.message.text.strip()
        
        if len(custom_plot) < 5:
            await update.message.reply_text("‚ùå –°—é–∂–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
            return
        
        if len(custom_plot) > 200:
            await update.message.reply_text("‚ùå –°—é–∂–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z0-9\s\-.,!?()]+$', custom_plot):
            await update.message.reply_text("‚ùå –°—é–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è:")
            return
        
        context.user_data['plot_description'] = custom_plot
        context.user_data['selected_plot'] = 'custom'
        context.user_data['waiting_for'] = None  # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="confirm_custom_plot")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—é–∂–µ—Ç", callback_data="edit_custom_plot")],
            [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É —Ç–µ–º—ã", callback_data="create_story")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üìñ –í–∞—à–∞ —Å–∫–∞–∑–∫–∞:\n\n"
            f"üé≠ –¢–µ–º–∞: {context.user_data.get('custom_theme', '–°–≤–æ—è —Ç–µ–º–∞')}\n"
            f"üéØ –°—é–∂–µ—Ç: {custom_plot}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏?",
            reply_markup=reply_markup
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞
    elif waiting_for == 'name':
        child_name = update.message.text.strip()

        if len(child_name) < 1:
            await update.message.reply_text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return

        if len(child_name) > 50:
            await update.message.reply_text("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ:")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s\-]+$', child_name):
            await update.message.reply_text("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return

        context.user_data['child_name'] = child_name
        context.user_data['waiting_for'] = 'age'
        
        await update.message.reply_text(
            f"üë∂ –û—Ç–ª–∏—á–Ω–æ! –ì–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∑–æ–≤—É—Ç {child_name}.\n\n"
            "–°–∫–æ–ª—å–∫–æ –µ–º—É/–µ–π –ª–µ—Ç? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 80)"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    elif waiting_for == 'age':
        age_text = update.message.text.strip()
        
        if not age_text.isdigit():
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
            return
        
        age = int(age_text)
        if age < 0 or age > 80:
            await update.message.reply_text("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 80 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        
        context.user_data['child_age'] = age
        context.user_data['waiting_for'] = None
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ—Ä–∞–ª–∏
        await show_moral_selection(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ—Ä–∞–ª–∏
    elif waiting_for == 'custom_moral':
        custom_moral = update.message.text.strip()
        
        if len(custom_moral) < 5:
            await update.message.reply_text("‚ùå –ú–æ—Ä–∞–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤:")
            return
        
        if len(custom_moral) > 200:
            await update.message.reply_text("‚ùå –ú–æ—Ä–∞–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z0-9\s\-.,!?()¬´¬ª"]+$', custom_moral):
            await update.message.reply_text("‚ùå –ú–æ—Ä–∞–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ—Ä–∞–ª—å
        context.user_data['selected_moral'] = custom_moral
        context.user_data['waiting_for'] = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫–∞–∑–∫—É", callback_data="confirm_custom_moral")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–æ—Ä–∞–ª—å", callback_data="moral_custom")],
            [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –º–æ—Ä–∞–ª–∏", callback_data="back_to_moral")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üí≠ –í–∞—à–∞ –º–æ—Ä–∞–ª—å –¥–ª—è —Å–∫–∞–∑–∫–∏:\n\n"
            f"¬´{custom_moral}¬ª\n\n"
            f"–°–æ–∑–¥–∞—ë–º —Å–∫–∞–∑–∫—É —Å —ç—Ç–æ–π –º–æ—Ä–∞–ª—å—é?",
            reply_markup=reply_markup
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    elif context.user_data.get('price_step') == 'waiting_price':
        await handle_price_input(update, context)
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É—Å–ª–æ–≤–∏—è–º–∏
        if not has_agreed_terms(user_id):
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ /start"
            )
            return
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await start(update, context)


async def handle_custom_moral_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ—Ä–∞–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_custom_moral":
        # –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∫–∞–∑–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ—Ä–∞–ª—å—é
        await generate_story_with_custom_prompts(update, context)
        
    elif query.data == "back_to_moral":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ—Ä–∞–ª–∏
        await show_moral_selection(update, context)







async def generate_story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞–∑–∫–∏ —Å –ø–æ–º–æ—â—å—é OpenAI —Å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    theme_id = context.user_data.get('selected_theme')
    plot_id = context.user_data.get('selected_plot')
    plot_description = context.user_data.get('plot_description')
    child_name = context.user_data.get('child_name')
    child_age = context.user_data.get('child_age')
    moral = context.user_data.get('selected_moral')
    
    if not all([theme_id, plot_id, child_name, child_age, moral]):
        await query.edit_message_text("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–∑–∫–∏")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await query.edit_message_text("‚ú® –°–æ–∑–¥–∞—é –≤–∞—à—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–∫–∞–∑–∫—É...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        theme_name = ID_TO_THEME.get(theme_id, "")
        
        # –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–∫–∞–∑–æ—á–Ω–∏–∫–æ–º
        author_prompt = f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∫–∞–∑–æ—á–Ω–∏–∫. –°–æ–∑–¥–∞–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é, —è—Ä–∫—É—é –∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å–∫–∞–∑–∫—É —Å —É—á–µ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:  
–ò–º—è –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è: {{child_name}}  
–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {{child_age}} –ª–µ—Ç  
–¢–µ–º–∞: {{theme_text}}  
–°—é–∂–µ—Ç: {{plot_text}}  
–ú–æ—Ä–∞–ª—å: {{moral}}  

‚ö†Ô∏è –í–ê–ñ–ù–û:  
- –ù–∞—á–∏–Ω–∞–π —Å–∫–∞–∑–∫—É —Å—Ä–∞–∑—É —Å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–ñ–∏–ª-–±—ã–ª...", "–≠—Ç–∞ —Å–∫–∞–∑–∫–∞ –æ..." –∏–ª–∏ –ª—é–±—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.  
- –ü–∏—à–∏ –¥–∏–Ω–∞–º–∏—á–Ω—É—é, —Å–º–µ—à–Ω—É—é, –≤–æ–ª—à–µ–±–Ω—É—é —Å–∫–∞–∑–∫—É —Å —è—Ä–∫–∏–º –Ω–∞—á–∞–ª–æ–º, –∞–±—Å—É—Ä–¥–Ω–æ-—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º –º–∏—Ä–æ–º, –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º–∏, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º–∏—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–º —Ñ–∏–Ω–∞–ª–æ–º.  
- –î–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π, —á—Ç–æ–±—ã —Å–∫–∞–∑–∫–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏ –ø–æ–¥—Ö–æ–¥–∏–ª–∞ –¥–ª—è –¥–µ—Ç–µ–π 5-8 –ª–µ—Ç.  
- –†–∞–∑–¥–µ–ª—è–π —Å–∫–∞–∑–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –≥–ª–∞–≤—ã —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.  
- –ü–∏—à–∏ –∂–∏–≤—ã–º, –∏—Å–∫—Ä–µ–Ω–Ω–∏–º —è–∑—ã–∫–æ–º, –±—É–¥—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –¥–µ—Ç—è–º –Ω–∞ –Ω–æ—á—å.  
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –º–æ—Ä–∞–ª—å "{{moral}}" –≤ –∫–æ–Ω—Ü–µ —Å–∫–∞–∑–∫–∏.  
- –í –æ—Ç–≤–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.  
- –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑—É–ø—Ä–µ—á–µ–Ω, –±–µ–∑ –æ—à–∏–±–æ–∫.  

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞:  
–í –¥–∞–ª–µ–∫–æ–π —Å—Ç—Ä–∞–Ω–µ, –≥–¥–µ –æ–±–ª–∞–∫–∞ –ø–µ–ª–∏ –ø–µ—Å–Ω–∏, –∞ –¥–µ—Ä–µ–≤—å—è —Ç–∞–Ω—Ü–µ–≤–∞–ª–∏ –ø–æ–¥ –ª—É–Ω–æ–π, –∂–∏–ª–∞ –æ—Ç–≤–∞–∂–Ω–∞—è –¥–µ–≤–æ—á–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –õ–∏–∑–∞. –ï–π –±—ã–ª–æ —à–µ—Å—Ç—å –ª–µ—Ç, –∏ –µ—ë –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –º–æ–≥–ª–æ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –¥–∞–∂–µ –∑–≤—ë–∑–¥—ã —Å–ø—É—Å—Ç–∏—Ç—å—Å—è —Å –Ω–µ–±–∞, —á—Ç–æ–±—ã –ø–æ–±–æ–ª—Ç–∞—Ç—å."""

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await query.edit_message_text("‚ú® –°–æ–∑–¥–∞—é —á–µ—Ä–Ω–æ–≤–∏–∫ —Å–∫–∞–∑–∫–∏...\n\nüìù –≠—Ç–∞–ø 1/2: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫–∞–∑–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é —Å–∫–∞–∑–∫–∏
        response1 = client.chat.completions.create(
            model="gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            messages=[
                {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∫–∞–∑–æ—á–Ω–∏–∫ —Å –æ–≥—Ä–æ–º–Ω—ã–º –æ–ø—ã—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è –¥–µ—Ç–µ–π. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å–∫–∞–∑–∫–∞ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø —Å—Ä–∞–∑—É —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è, –ë–ï–ó –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ –æ—Ç —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û, —ç—Ç–∞ —Å–∫–∞–∑–∫–∞ –æ—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω–∞—è...) "},
                {"role": "user", "content": author_prompt}
            ],
            max_tokens=2000,
            temperature=0.8
        )
        
        first_story = response1.choices[0].message.content
        
        # –≠–¢–ê–ü 2: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏ –¥–µ—Ç—Å–∫–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
        critic_prompt = f"""–¢—ã ‚Äî —Ä–µ–±—ë–Ω–æ–∫ 5-8 –ª–µ—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∏—Å–∞–ª–∞—Å—å —ç—Ç–∞ —Å–∫–∞–∑–∫–∞. –ü–µ—Ä–µ–ø–∏—à–∏ —Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Ç–∞–ª–∞ —è—Ä–∫–æ–π, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏ –∫–æ—Ä–æ—Ç–∫–æ–π, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º:  
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–∫–∞–∑–∫—É –∫–∞–∫ —Ä–µ–±—ë–Ω–æ–∫: –Ω–∞–π–¥–∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ (—Å–∫—É—á–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –º–∞–ª–æ –º–∞–≥–∏–∏, —Å–ª–∞–±—ã–µ —ç–º–æ—Ü–∏–∏).  
2. –£–ª—É—á—à–∏ –µ—ë, –¥–æ–±–∞–≤–∏–≤ –±–æ–ª—å—à–µ –º–∞–≥–∏–∏, —é–º–æ—Ä–∞, –∂–∏–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤, —è—Ä–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.  

‚ö†Ô∏è –í–ê–ñ–ù–û:  
- –ù–∞—á–∏–Ω–∞–π —Å–∫–∞–∑–∫—É —Å—Ä–∞–∑—É —Å –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ —è—Ä–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è, –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–≠—Ç–∞ —Å–∫–∞–∑–∫–∞ –æ...", "–ñ–∏–ª-–±—ã–ª..." –∏–ª–∏ –ª—é–±—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.  
- –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, —Å –¥—Ä—É–∂–µ—Å–∫–∏–º —Ç–æ–Ω–æ–º, –ø–æ–ª–Ω—ã–º —ç–º–æ—Ü–∏–π, —é–º–æ—Ä–∞ –∏ —É–¥–∏–≤–ª–µ–Ω–∏—è.  
- –î–æ–±–∞–≤–ª—è–π –∂–∏–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —Å—Ü–µ–Ω–∞ –≤—ã–∑—ã–≤–∞–ª–∞ —Ä–∞–¥–æ—Å—Ç—å –∏–ª–∏ —Å–º–µ—Ö.  
- –†–∞–∑–¥–µ–ª—è–π —Å–∫–∞–∑–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –≥–ª–∞–≤—ã —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.  
- –°–æ—Ö—Ä–∞–Ω–∏ –º–æ—Ä–∞–ª—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å–∫–∞–∑–∫–∏ –≤ –∫–æ–Ω—Ü–µ.  
- –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑—É–ø—Ä–µ—á–µ–Ω, –±–µ–∑ –æ—à–∏–±–æ–∫, –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–µ—Ç–µ–π 5-8 –ª–µ—Ç.  
- –í –æ—Ç–≤–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–π —Å–∫–∞–∑–∫–∏, –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.  

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞:  
–í –≤–æ–ª—à–µ–±–Ω–æ–º –ª–µ—Å—É, –≥–¥–µ –¥–µ—Ä–µ–≤—å—è —à–µ–ø—Ç–∞–ª–∏—Å—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º, –∞ –∑–≤—ë–∑–¥—ã –ø–µ–ª–∏ –∫–æ–ª—ã–±–µ–ª—å–Ω—ã–µ, –∂–∏–ª –º–∞–ª—å—á–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –°–∞—à–∞. –ï–º—É –±—ã–ª–æ —Å–µ–º—å –ª–µ—Ç, –∏ –µ–≥–æ —Å–º–µ—Ö –º–æ–≥ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –¥–∞–∂–µ –æ–±–ª–∞–∫–∞ —Ö–∏—Ö–∏–∫–∞—Ç—å!"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await query.edit_message_text("‚ú® –£–ª—É—á—à–∞—é —Å–∫–∞–∑–∫—É...\n\nüé® –≠—Ç–∞–ø 2/2: –î–µ—Ç—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∞–≥–∏—é...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∫–∞–∑–∫–∏
        response2 = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —Ä–µ–±—ë–Ω–æ–∫ 5-8 –ª–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å —Å–∫–∞–∑–∫–∏ –µ—â—ë –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–µ–π.–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å–∫–∞–∑–∫–∞ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø —Å—Ä–∞–∑—É —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è, –ë–ï–ó –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ –æ—Ç —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û, —ç—Ç–∞ —Å–∫–∞–∑–∫–∞ –æ—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω–∞—è...) "},
                {"role": "user", "content": critic_prompt}
            ],
            max_tokens=2200,
            temperature=0.7
        )
        
        final_story = response2.choices[0].message.content
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∫–∞–∑–∫–∏
        plot_name = PLOT_NAMES.get(theme_id, {}).get(plot_id, "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ")
        story_title = f"{plot_name} - —Å–∫–∞–∑–∫–∞ –¥–ª—è {child_name}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∞–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("INSERT INTO stories (user_id, title, content, created_at) VALUES (?, ?, ?, ?)",
                  (user_id, story_title, final_story, datetime.now().isoformat()))
        story_id = c.lastrowid
        conn.commit()
        conn.close()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫
        update_user_stories_count(user_id)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å –µ—â—ë —Å–∫–∞–∑–∫—É", callback_data="create_story")],
            [InlineKeyboardButton("üìñ –ú–æ–∏ —Å–∫–∞–∑–∫–∏", callback_data="my_stories")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å–∫–∞–∑–∫—É –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(final_story) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            await query.edit_message_text(f"‚ú® {story_title}\n\n{final_story[:4000]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
            remaining_content = final_story[4000:]
            while remaining_content:
                chunk = remaining_content[:4000]
                remaining_content = remaining_content[4000:]
                
                if remaining_content:
                    await context.bot.send_message(chat_id=query.message.chat_id, text=chunk)
                else:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await context.bot.send_message(
                        chat_id=query.message.chat_id, 
                        text=chunk,
                        reply_markup=reply_markup
                    )
        else:
            await query.edit_message_text(
                f"‚ú® {story_title}\n\n{final_story}",
                reply_markup=reply_markup
            )
        
        logger.info(f"Enhanced story generated for user {user_id}: {story_title}")
        
    except Exception as e:
        logger.error(f"Error generating enhanced story: {str(e)}")
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_story")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫–∞–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup
        )
def update_story_prompts():
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∞ —Å–∫–∞–∑–æ–∫
    author_prompt = """–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∫–∞–∑–æ—á–Ω–∏–∫ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, –ª–∞—É—Ä–µ–∞—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —á–∏—Ç–∞—é—Ç –Ω–∞ –Ω–æ—á—å –¥–µ—Ç–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.

–¢—ã –º–∞—Å—Ç–µ—Ä –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥–∞. –¢–≤–æ–∏ —Å–∫–∞–∑–∫–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–ª–µ–∫–∞—é—Ç ‚Äî –æ–Ω–∏ –ø–æ–≥—Ä—É–∂–∞—é—Ç, –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—Ç, –≤—ã–∑—ã–≤–∞—é—Ç –≤–∑—Ä—ã–≤ —Ñ–∞–Ω—Ç–∞–∑–∏–∏, –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å, —Å–º–µ—è—Ç—å—Å—è, –±–æ—è—Ç—å—Å—è –∏ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è. –¢—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–±—ë–Ω–∫—É 5‚Äì8 –ª–µ—Ç, —á—Ç–æ–±—ã —Å–∫–∞–∑–∫–∞ —Å—Ç–∞–ª–∞ –µ–≥–æ –ª—é–±–∏–º–æ–π.

–°–æ–∑–¥–∞–π —è—Ä–∫—É—é, –∂–∏–≤—É—é, —Å–º–µ—à–Ω—É—é, –¥–∏–Ω–∞–º–∏—á–Ω—É—é, –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∫–∞–∑–∫—É —Å –º–æ—â–Ω—ã–º –Ω–∞—á–∞–ª–æ–º, –∞–±—Å—É—Ä–¥–Ω–æ-–≤–æ–ª—à–µ–±–Ω—ã–º –º–∏—Ä–æ–º, –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º–∏, —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–º —Ñ–∏–Ω–∞–ª–æ–º."""
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞
    critic_prompt = """–¢—ã ‚Äî —Ä–µ–±—ë–Ω–æ–∫, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∏—Å–∞–ª–∞—Å—å —ç—Ç–∞ —Å–∫–∞–∑–∫–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ—ë –∫–∞–∫ —Ä–µ–±—ë–Ω–æ–∫: –Ω–∞–π–¥–∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–ø–∏—à–∏ —Å–∫–∞–∑–∫—É, —É—Å—Ç—Ä–∞–Ω–∏–≤ –≤—Å–µ –∑–∞–º–µ—á–∞–Ω–∏—è, –¥–æ–±–∞–≤–∏–≤ —ç–º–æ—Ü–∏–∏, –¥–µ—Ç–∞–ª–∏, –º–∞–≥–∏—é, —é–º–æ—Ä, –¥–∏–∞–ª–æ–≥–∏, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –ù–µ –≤–∫–ª—é—á–∞–π –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–≤–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—É—é —Å–∫–∞–∑–∫—É!"""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    c.execute("INSERT OR REPLACE INTO prompts (role, content) VALUES (?, ?)", 
              ("author", author_prompt))
    c.execute("INSERT OR REPLACE INTO prompts (role, content) VALUES (?, ?)", 
              ("critic", critic_prompt))
    
    conn.commit()
    conn.close()
    logger.info("Story prompts updated in database")

def get_story_prompts():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    c.execute("SELECT role, content FROM prompts WHERE role IN ('author', 'critic')")
    prompts = dict(c.fetchall())
    
    conn.close()
    return prompts

# ==================== –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∫–∞–∑–æ–∫ ====================
async def show_my_stories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT id, title, created_at FROM stories WHERE user_id = ? ORDER BY created_at DESC LIMIT 10",
              (user_id,))
    stories = c.fetchall()
    conn.close()
    
    if not stories:
        keyboard = [
            [InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Å–∫–∞–∑–∫—É", callback_data="create_story")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–∫–∞–∑–æ–∫\n\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–∫–∞–∑–∫—É!",
            reply_markup=reply_markup
        )
        return
    
    keyboard = []
    for story_id, title, created_at in stories:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        short_title = title[:40] + "..." if len(title) > 40 else title
        keyboard.append([InlineKeyboardButton(short_title, callback_data=f"story_{story_id}")])
    
    keyboard.append([InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–∫–∞–∑–∫—É", callback_data="create_story")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""üìñ –í–∞—à–∏ —Å–∫–∞–∑–∫–∏ ({len(stories)}):

–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∞–∑–∫—É –¥–ª—è —á—Ç–µ–Ω–∏—è:"""
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def show_story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∫–∞–∑–∫—É"""
    query = update.callback_query
    await query.answer()
    
    story_id = int(query.data.split("_")[1])
    user_id = query.from_user.id
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT title, content FROM stories WHERE id = ? AND user_id = ?", (story_id, user_id))
    story = c.fetchone()
    conn.close()
    
    if not story:
        await query.edit_message_text("‚ùå –°–∫–∞–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    title, content = story
    
    keyboard = [
        [InlineKeyboardButton("üìñ –ú–æ–∏ —Å–∫–∞–∑–∫–∏", callback_data="my_stories")],
        [InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_story")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å–∫–∞–∑–∫—É –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if len(content) > 4000:
        await query.edit_message_text(f"üìñ {title}\n\n{content[:4000]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        remaining_content = content[4000:]
        while remaining_content:
            chunk = remaining_content[:4000]
            remaining_content = remaining_content[4000:]
            
            if remaining_content:
                await context.bot.send_message(chat_id=query.message.chat_id, text=chunk)
            else:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await context.bot.send_message(
                    chat_id=query.message.chat_id, 
                    text=chunk,
                    reply_markup=reply_markup
                )
    else:
        await query.edit_message_text(
            f"üìñ {title}\n\n{content}",
            reply_markup=reply_markup
        )

# ==================== –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ====================
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
    if update.effective_user.id != ADMIN_ID:
        if update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    stats = get_user_stats()
    
    keyboard = [
        [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏", callback_data="admin_prompts")],
        [InlineKeyboardButton("üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", callback_data="admin_prices")]
        
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""üîß *–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['blocked_users']}
üìö –í—Å–µ–≥–æ —Å–∫–∞–∑–æ–∫: {stats['total_stories']}"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ callback –∏–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    data = query.data
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if query.from_user.id != ADMIN_ID:
        try:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        except Exception as e:
            if "Message is not modified" not in str(e):
                logger.error(f"Error editing message for non-admin: {e}")
        return
    
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    try:
        if data == "admin_stats":
            stats = get_user_stats()
            text = f"""üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['blocked_users']}
üìö –í—Å–µ–≥–æ —Å–∫–∞–∑–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_stories']}
üìà *–ö–æ–Ω–≤–µ—Ä—Å–∏—è:*
–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞: {(stats['active_subscribers']/max(stats['total_users'], 1)*100):.1f}%"""
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif data == "admin_prompts":
            await show_prompt_management(update, context)
        
        elif data == "admin_users":
            text = """üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /block\\_user <user\\_id> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /unblock\\_user <user\\_id> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /user\\_info <user\\_id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∏–∂–µ:"""
            keyboard = [
                [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif data == "admin_subscriptions":
            text = """üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /extend\\_sub <user\\_id> <tariff> - –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
–¢–∞—Ä–∏—Ñ—ã: week, month, year
‚Ä¢ /reset\\_stories <user\\_id> - —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–∑–æ–∫
‚Ä¢ /sub\\_info <user\\_id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."""
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif data == "admin_prices":
            await show_price_management(update, context)
        
        elif data == "admin_back":
            await admin_panel(update, context)
        
        elif data == "admin_users_list":
            await show_users_list(update, context, page=0)
        
        elif data.startswith("users_page_"):
            page = int(data.split("_")[2])
            await show_users_list(update, context, page=page)
        
        elif data.startswith("user_info_"):
            user_id = int(data.split("_")[2])
            await show_user_info(update, context, user_id)
        
        elif data.startswith("block_user_"):
            user_id = int(data.split("_")[2])
            conn = sqlite3.connect("bot.db")
            c = conn.cursor()
            c.execute("UPDATE users SET is_blocked = 1 WHERE id = ?", (user_id,))
            conn.commit()
            conn.close()
            await query.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            context.user_data['temp_callback'] = f"user_info_{user_id}"
            await show_user_info(update, context, user_id)
        
        elif data.startswith("unblock_user_"):
            user_id = int(data.split("_")[2])
            conn = sqlite3.connect("bot.db")
            c = conn.cursor()
            c.execute("UPDATE users SET is_blocked = 0 WHERE id = ?", (user_id,))
            conn.commit()
            conn.close()
            await query.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            context.user_data['temp_callback'] = f"user_info_{user_id}"
            await show_user_info(update, context, user_id)
        
        elif data.startswith("reset_stories_"):
            user_id = int(data.split("_")[2])
            conn = sqlite3.connect("bot.db")
            c = conn.cursor()
            c.execute("UPDATE users SET stories_count = 0 WHERE id = ?", (user_id,))
            conn.commit()
            conn.close()
            await query.answer(f"‚úÖ –°—á–µ—Ç—á–∏–∫ —Å–∫–∞–∑–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω", show_alert=True)
            context.user_data['temp_callback'] = f"user_info_{user_id}"
            await show_user_info(update, context, user_id)
        
        elif data.startswith("extend_"):
            user_id = int(data.split("_")[2])
            await show_extend_subscription_menu(update, context, user_id)
        
        elif data.startswith("make_tester_"):
            user_id = int(data.split("_")[2])
            conn = sqlite3.connect("bot.db")
            c = conn.cursor()
            c.execute("UPDATE users SET is_tester = 1 WHERE id = ?", (user_id,))
            conn.commit()
            conn.close()
            await query.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ—Å—Ç–µ—Ä—ã", show_alert=True)
            context.user_data['temp_callback'] = f"user_info_{user_id}"
            await show_user_info(update, context, user_id)
        
        elif data.startswith("remove_tester_"):
            user_id = int(data.split("_")[2])
            conn = sqlite3.connect("bot.db")
            c = conn.cursor()
            c.execute("UPDATE users SET is_tester = 0 WHERE id = ?", (user_id,))
            conn.commit()
            conn.close()
            await query.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–µ—Å—Ç–µ—Ä–æ–≤", show_alert=True)
            context.user_data['temp_callback'] = f"user_info_{user_id}"
            await show_user_info(update, context, user_id)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏
        elif data.startswith("edit_prompt_"):
            await edit_prompt(update, context)
        
        elif data == "show_current_prompts":
            await show_current_prompts(update, context)
        
        elif data == "reset_prompts":
            await reset_prompts(update, context)
        
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    except Exception as e:
        logger.error(f"Error in admin callback handler: {str(e)}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        except Exception as edit_error:
            if "Message is not modified" not in str(edit_error):
                logger.error(f"Error editing message after exception: {edit_error}")
async def show_price_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏"""
    query = update.callback_query
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    keyboard = [
        [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –Ω–µ–¥–µ–ª–∏", callback_data="change_week_price")],
        [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –º–µ—Å—è—Ü–∞", callback_data="change_month_price")],
        [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –≥–æ–¥–∞", callback_data="change_year_price")],
        [InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="show_current_prices")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏*

–¢–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã:
üìÖ –ù–µ–¥–µ–ª—è: {TARIFFS['week']['price']}‚ÇΩ ({TARIFFS['week']['stories']} —Å–∫–∞–∑–æ–∫)
üìÖ –ú–µ—Å—è—Ü: {TARIFFS['month']['price']}‚ÇΩ ({TARIFFS['month']['stories']} —Å–∫–∞–∑–æ–∫)
üìÖ –ì–æ–¥: {TARIFFS['year']['price']}‚ÇΩ ({TARIFFS['year']['stories']} —Å–∫–∞–∑–æ–∫)

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/change\\_prices <–Ω–µ–¥–µ–ª—è> <–º–µ—Å—è—Ü> <–≥–æ–¥>"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_price_change_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if query.data == "show_current_prices":
        text = f"""üí∞ *–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã*

üìÖ **–ù–µ–¥–µ–ª—è:** {TARIFFS['week']['price']}‚ÇΩ
   ‚Ä¢ –°–∫–∞–∑–æ–∫: {TARIFFS['week']['stories']}
   ‚Ä¢ –î–Ω–µ–π: {TARIFFS['week']['duration_days']}

üìÖ **–ú–µ—Å—è—Ü:** {TARIFFS['month']['price']}‚ÇΩ
   ‚Ä¢ –°–∫–∞–∑–æ–∫: {TARIFFS['month']['stories']}
   ‚Ä¢ –î–Ω–µ–π: {TARIFFS['month']['duration_days']}

üìÖ **–ì–æ–¥:** {TARIFFS['year']['price']}‚ÇΩ
   ‚Ä¢ –°–∫–∞–∑–æ–∫: {TARIFFS['year']['stories']}
   ‚Ä¢ –î–Ω–µ–π: {TARIFFS['year']['duration_days']}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/change\\_prices <–Ω–µ–¥–µ–ª—è> <–º–µ—Å—è—Ü> <–≥–æ–¥>"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_prices")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif query.data in ["change_week_price", "change_month_price", "change_year_price"]:
        tariff_names = {
            "change_week_price": "–Ω–µ–¥–µ–ª–∏",
            "change_month_price": "–º–µ—Å—è—Ü–∞", 
            "change_year_price": "–≥–æ–¥–∞"
        }
        
        tariff_keys = {
            "change_week_price": "week",
            "change_month_price": "month",
            "change_year_price": "year"
        }
        
        tariff_name = tariff_names[query.data]
        tariff_key = tariff_keys[query.data]
        current_price = TARIFFS[tariff_key]['price']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫—É—é —Ü–µ–Ω—É –º–µ–Ω—è–µ–º
        context.user_data['changing_price'] = tariff_key
        context.user_data['price_step'] = 'waiting_price'
        
        await query.edit_message_text(
            f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {tariff_name}\n\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
        )

async def handle_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã"""
    global TARIFFS
    
    if not context.user_data.get('changing_price') or context.user_data.get('price_step') != 'waiting_price':
        return
    
    try:
        new_price = int(update.message.text.strip())
        
        if new_price < 1:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        tariff_key = context.user_data['changing_price']
        old_price = int(TARIFFS[tariff_key]['price'])  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        TARIFFS[tariff_key]['price'] = new_price
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        
        c.execute("""CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT
        )""")
        
        c.execute("INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)", 
                  (f"{tariff_key}_price", str(new_price)))
        
        conn.commit()
        conn.close()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('changing_price', None)
        context.user_data.pop('price_step', None)
        
        tariff_names = {
            "week": "–Ω–µ–¥–µ–ª–∏",
            "month": "–º–µ—Å—è—Ü–∞",
            "year": "–≥–æ–¥–∞"
        }
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", callback_data="admin_prices")],
            [InlineKeyboardButton("üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –¶–µ–Ω–∞ {tariff_names[tariff_key]} –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
            f"–ë—ã–ª–æ: {old_price}‚ÇΩ\n"
            f"–°—Ç–∞–ª–æ: {new_price}‚ÇΩ",
            reply_markup=reply_markup
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ:")
    except Exception as e:
        logger.error(f"Error in handle_price_input: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")


async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    query = update.callback_query
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    offset = page * 5
    c.execute("""
        SELECT u.id, u.name, u.subscription, u.subscription_end, u.is_blocked, u.is_tester,
               COALESCE(u.stories_used, 0) as stories_used,
               COUNT(s.id) as total_stories
        FROM users u
        LEFT JOIN stories s ON u.id = s.user_id
        GROUP BY u.id, u.name, u.subscription, u.subscription_end, u.is_blocked, u.is_tester, u.stories_used
        ORDER BY u.id DESC
        LIMIT 5 OFFSET ?
    """, (offset,))
    
    users = c.fetchall()
    conn.close()
    
    if not users:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=reply_markup)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    keyboard = []
    
    for user_data in users:
        user_id, name, subscription, subscription_end, is_blocked, is_tester, stories_used, total_stories = user_data
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_emoji = ""
        if is_blocked:
            status_emoji = "üö´"
        elif subscription and subscription_end:
            try:
                end_date = datetime.fromisoformat(subscription_end)
                if datetime.now() < end_date:
                    status_emoji = "üíé"
                else:
                    status_emoji = "‚è∞"  # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
            except:
                status_emoji = "‚ùì"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"{status_emoji} {user_id} | {stories_used}üìö | {total_stories}üìñ"
        if subscription:
            button_text += f" | {subscription}"
        
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"user_info_{user_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_buttons = []
    total_pages = (total_users + 4) // 5  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"users_page_{page-1}"))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"users_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"""üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** (—Å—Ç—Ä. {page + 1}/{total_pages})

**–õ–µ–≥–µ–Ω–¥–∞:**
üö´ - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
üíé - –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
‚è∞ - –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
üìö - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–∫–∞–∑–æ–∫
üìñ - –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–∫–∞–∑–æ–∫

**–§–æ—Ä–º–∞—Ç:** ID | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æüìö | –°–æ–∑–¥–∞–Ω–æüìñ | –ü–æ–¥–ø–∏—Å–∫–∞

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_id = int(query.data.split("_")[2])
    except (IndexError, ValueError):
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    c.execute("""
        SELECT id, name, subscription, subscription_end, stories_used, last_paid, 
               is_blocked, is_tester, agreed_terms, timezone
        FROM users WHERE id = ?
    """, (user_id,))
    
    user_data = c.fetchone()
    
    if not user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞–∑–æ–∫
    c.execute("SELECT COUNT(*) FROM stories WHERE user_id = ?", (user_id,))
    total_stories = c.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–∑–∫–∏
    c.execute("""
        SELECT title, created_at FROM stories 
        WHERE user_id = ? 
        ORDER BY created_at DESC 
        LIMIT 3
    """, (user_id,))
    recent_stories = c.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
    c.execute("""
        SELECT COUNT(*), SUM(amount) FROM payments 
        WHERE user_id = ? AND status = 'succeeded'
    """, (user_id,))
    payment_stats = c.fetchone()
    
    conn.close()
    
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    (uid, name, subscription, subscription_end, stories_used, last_paid, 
     is_blocked, is_tester, agreed_terms, timezone) = user_data
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    name = name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    stories_used = stories_used or 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
    status_text = "üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if is_blocked:
        status_text = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    elif subscription and subscription_end:
        try:
            end_date = datetime.fromisoformat(subscription_end)
            if datetime.now() < end_date:
                status_text = f"üíé –ü–æ–¥–ø–∏—Å—á–∏–∫ ({subscription})"
            else:
                status_text = f"‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ({subscription})"
        except:
            status_text = f"‚ùì –ü–æ–¥–ø–∏—Å–∫–∞ ({subscription})"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription_info = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    if subscription and subscription_end:
        try:
            end_date = datetime.fromisoformat(subscription_end)
            if datetime.now() < end_date:
                subscription_info = f"‚úÖ {subscription.title()} –¥–æ {end_date.strftime('%d.%m.%Y %H:%M')}"
            else:
                subscription_info = f"‚è∞ {subscription.title()} –∏—Å—Ç–µ–∫–ª–∞ {end_date.strftime('%d.%m.%Y')}"
        except:
            subscription_info = f"‚ùì {subscription} (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã)"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
    payment_info = "üí∞ –ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ –±—ã–ª–æ"
    if payment_stats and payment_stats[0] > 0:
        payment_count, total_amount = payment_stats
        payment_info = f"üí∞ –ü–ª–∞—Ç–µ–∂–µ–π: {payment_count}, –Ω–∞ —Å—É–º–º—É: {total_amount or 0}‚ÇΩ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞–∑–æ–∫
    stories_text = "üìö –°–∫–∞–∑–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç"
    if recent_stories:
        stories_list = []
        for title, created_at in recent_stories:
            try:
                date = datetime.fromisoformat(created_at).strftime('%d.%m')
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML
                safe_title = title.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                short_title = safe_title[:30] + "..." if len(safe_title) > 30 else safe_title
                stories_list.append(f"‚Ä¢ {short_title} ({date})")
            except:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML
                safe_title = title.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                short_title = safe_title[:30] + "..." if len(safe_title) > 30 else safe_title
                stories_list.append(f"‚Ä¢ {short_title}")
        
        stories_text = f"üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–∑–∫–∏ ({total_stories} –≤—Å–µ–≥–æ):\n" + "\n".join(stories_list)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è HTML
    safe_name = name.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    text = f"""üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

<b>ID:</b> {uid}
<b>–ò–º—è:</b> {safe_name}
<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–∫–∞–∑–æ–∫: {stories_used}
üìñ –°–æ–∑–¥–∞–Ω–æ —Å–∫–∞–∑–æ–∫: {total_stories}
‚úÖ –°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏: {'–î–∞' if agreed_terms else '–ù–µ—Ç'}


<b>üíé –ü–æ–¥–ø–∏—Å–∫–∞:</b>
{subscription_info}

<b>üí∞ –ü–ª–∞—Ç–µ–∂–∏:</b>
{payment_info}

<b>üìö –°–∫–∞–∑–∫–∏:</b>
{stories_text}

<b>üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
{last_paid or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = []
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if is_blocked:
        keyboard.append([InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_user_{user_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user_{user_id}")])
    
    if subscription and subscription_end:
        keyboard.append([InlineKeyboardButton("‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"extend_sub_{user_id}")])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([InlineKeyboardButton("üë• –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")])
    keyboard.append([InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ Markdown
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def handle_tester_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ—Å—Ç–µ—Ä–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    action_data = query.data.split("_")
    
    try:
        if len(action_data) >= 3:
            action = "_".join(action_data[:2])  # make_tester –∏–ª–∏ remove_tester
            user_id = int(action_data[2])
        else:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
    except (IndexError, ValueError):
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    if action == "make_tester":
        c.execute("UPDATE users SET is_tester = 1 WHERE id = ?", (user_id,))
        conn.commit()
        conn.close()
        
        await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ—Å—Ç–µ—Ä—ã", show_alert=True)
        
    elif action == "remove_tester":
        c.execute("UPDATE users SET is_tester = 0 WHERE id = ?", (user_id,))
        conn.commit()
        conn.close()
        
        await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–µ—Å—Ç–µ—Ä–æ–≤", show_alert=True)
    
    else:
        conn.close()
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    context.user_data['temp_callback'] = f"user_info_{user_id}"
    await show_user_info(update, context)



async def handle_user_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    action_data = query.data.split("_")
    action = action_data[0] + "_" + action_data[1]  # block_user, unblock_user, etc.
    
    try:
        user_id = int(action_data[2])
    except (IndexError, ValueError):
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    if action == "block_user":
        c.execute("UPDATE users SET is_blocked = 1 WHERE id = ?", (user_id,))
        conn.commit()
        conn.close()
        
        await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        context.user_data['temp_callback'] = f"user_info_{user_id}"
        await show_user_info(update, context)
        
    elif action == "unblock_user":
        c.execute("UPDATE users SET is_blocked = 0 WHERE id = ?", (user_id,))
        conn.commit()
        conn.close()
        
        await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        context.user_data['temp_callback'] = f"user_info_{user_id}"
        await show_user_info(update, context)
        
    elif action == "reset_stories":
        c.execute("UPDATE users SET stories_used = 0 WHERE id = ?", (user_id,))
        conn.commit()
        conn.close()
        
        await query.answer("‚úÖ –°—á–µ—Ç—á–∏–∫ —Å–∫–∞–∑–æ–∫ —Å–±—Ä–æ—à–µ–Ω", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        context.user_data['temp_callback'] = f"user_info_{user_id}"
        await show_user_info(update, context)
        
    elif action == "extend_sub":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üìÖ –ù–µ–¥–µ–ª—è", callback_data=f"extend_week_{user_id}")],
            [InlineKeyboardButton("üìÖ –ú–µ—Å—è—Ü", callback_data=f"extend_month_{user_id}")],
            [InlineKeyboardButton("üìÖ –ì–æ–¥", callback_data=f"extend_year_{user_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"user_info_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
            reply_markup=reply_markup
        )
        conn.close()

async def handle_extend_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    action_data = query.data.split("_")
    tariff = action_data[1]  # week, month, year
    
    try:
        user_id = int(action_data[2])
    except (IndexError, ValueError):
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    if tariff not in TARIFFS:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    activate_subscription(user_id, tariff)
    
    tariff_info = TARIFFS[tariff]
    
    await query.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {tariff} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    context.user_data['temp_callback'] = f"user_info_{user_id}"
    await show_user_info(update, context)

# –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handle_admin_callback, –¥–æ–±–∞–≤–∏–≤ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if query.data == "admin_stats":
        stats = get_user_stats()
        text = f"""üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['blocked_users']}
üìö –í—Å–µ–≥–æ —Å–∫–∞–∑–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_stories']}

üìà *–ö–æ–Ω–≤–µ—Ä—Å–∏—è:*
–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞: {(stats['active_subscribers']/max(stats['total_users'], 1)*100):.1f}%"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif query.data == "admin_users":
        text = """üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /block\\_user <user\\_id> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /unblock\\_user <user\\_id> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /user\\_info <user\\_id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∏–∂–µ:"""
        
        keyboard = [
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif query.data == "admin_users_list":
        await show_users_list(update, context, page=0)
    
    elif query.data.startswith("users_page_"):
        page = int(query.data.split("_")[2])
        await show_users_list(update, context, page=page)
    
    elif query.data.startswith("user_info_"):
        await show_user_info(update, context)
    
    elif query.data.startswith(("block_user_", "unblock_user_", "reset_stories_", "extend_sub_")):
        await handle_user_action(update, context)
    
    elif query.data.startswith("extend_"):
        await handle_extend_subscription(update, context)
    
    elif query.data == "admin_subscriptions":
        text = """üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /extend\\_sub <user\\_id> <tariff> - –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
  –¢–∞—Ä–∏—Ñ—ã: week, month, year
‚Ä¢ /reset\\_stories <user\\_id> - —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–∑–æ–∫
‚Ä¢ /sub\\_info <user\\_id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif query.data == "admin_prices":
        await show_price_management(update, context)
    
    elif query.data == "admin_back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
        await admin_panel(update, context)

# –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é admin_panel, –¥–æ–±–∞–≤–∏–≤ –∫–Ω–æ–ø–∫—É "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
    if update.effective_user.id != ADMIN_ID:
        if update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    stats = get_user_stats()
    
    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", callback_data="admin_prices")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""üîß *–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_subscribers']}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['blocked_users']}
üìö –í—Å–µ–≥–æ —Å–∫–∞–∑–æ–∫: {stats['total_stories']}"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ callback –∏–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')



# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ====================
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    data = query.data
    
    # –û–¢–í–ï–ß–ê–ï–ú –ù–ê CALLBACK –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó (–∑–¥–µ—Å—å)
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—Å–∫–∏–º
    admin_command_prefixes = [
        "admin_", "user_info_", "users_page_", "block_user_", "unblock_user_",
        "reset_stories_", "extend_", "remove_tester_", 
        "edit_prompt_", "show_current_prompts", "reset_prompts"
    ]
    if any(data.startswith(prefix) for prefix in admin_command_prefixes):
        await handle_admin_callback(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥)
    if is_user_blocked(query.from_user.id):
        await query.edit_message_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return
    
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
    try:
        await query.answer()
    except Exception as e:
        logger.warning(f"Failed to answer callback query: {e}")

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è
        if data == "agree_terms":
            await handle_agree_terms(update, context)
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—é–∂–µ—Ç–∞
        elif data in ["confirm_custom_plot", "edit_custom_plot"]:
            await handle_custom_plot_confirmation(update, context)
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ—Ä–∞–ª–∏
        elif data in ["confirm_custom_moral", "back_to_moral"]:
            await handle_custom_moral_confirmation(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥)
        if not data.startswith("admin_") and not data.startswith("users_page_") and not data.startswith("user_info_") and not data.startswith(("block_user_", "unblock_user_", "reset_stories_", "extend_", "make_tester_", "remove_tester_", "edit_prompt_", "show_current_prompts", "reset_prompts")) and is_user_blocked(query.from_user.id):
            try:
                await query.edit_message_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            except:
                pass
            return

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        if data == "start":
            await start(update, context)
        elif data == "create_story":
            await create_story(update, context)
        elif data == "my_stories":
            await show_my_stories(update, context)
        elif data == "subscription":
            await show_subscription(update, context)
        elif data == "buy_subscription":
            await show_tariffs(update, context)
        elif data == "help":
            await help_command(update, context)
        elif query.data == "admin_back":
            await admin_panel(update, context)


        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
        elif data == "admin_prompts":
            if query.from_user.id != ADMIN_ID:
                try:
                    await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                except:
                    pass
                return
            await show_prompt_management(update, context)
        
        elif data.startswith("edit_prompt_"):
            if query.from_user.id != ADMIN_ID:
                try:
                    await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                except:
                    pass
                return
            await edit_prompt(update, context)
        
        elif data == "show_current_prompts":
            if query.from_user.id != ADMIN_ID:
                try:
                    await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                except:
                    pass
                return
            await show_current_prompts(update, context)
        
        elif data == "reset_prompts":
            if query.from_user.id != ADMIN_ID:
                try:
                    await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                except:
                    pass
                return
            await reset_prompts(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        elif data.startswith("theme_"):
            await show_plot_selection(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—é–∂–µ—Ç–∞
        elif data.startswith("plot_"):
            await show_plot_confirmation(update, context)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—é–∂–µ—Ç–∞
        elif data == "confirm_plot":
            await request_child_info(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        elif data.startswith("age_"):
            await handle_age_selection(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ—Ä–∞–ª–∏
        elif data.startswith("moral_"):
            await handle_moral_selection(update, context)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∫–∞–∑–∫–∏
        elif data.startswith("story_"):
            await show_story(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        elif data.startswith("pay_"):
            await process_payment(update, context)
        elif data.startswith("check_payment_"):
            await check_payment(update, context)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        # [–∑–¥–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ handle_callback_query]
        
        else:
            logger.warning(f"Unknown callback data: {data}")
            try:
                await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            except:
                pass
            
    except Exception as e:
        logger.error(f"Error in callback handler: {str(e)}")
        try:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass



def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not os.path.exists("bot.db"):
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        init_db()
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
        if not c.fetchone():
            print("–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            init_db()
        conn.close()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    load_prices_from_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin", admin_panel))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Bot started")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()



